
;;;;;; Constants


; oam ram
bullet0		EQM $020c
bullet1		EQM $0210
bullet2		EQM $0214
bullet3		EQM $0218
bullet4_or_opt	EQM $021c

player_bullet_sprite EQM $79


        
player_bullet_next: subroutine
	; increase bullet data offset
        inx
        inx
        ; increase bullet oam offset
        iny
        iny
        iny
        iny
        rts
        
        
player_bullet_collision_handler: subroutine
	clc
        lda collision_0_x
        adc collision_0_w
        bcc .in_bounds; make sure x+w is not less than x
        lda #$00
        rts
.in_bounds        
        ; bullet dimensions don't change
        lda #$04
        sta collision_1_w
        sta collision_1_h
        
        sty temp00
        ldy #$0c
.bullet_loop
        lda oam_ram_x,y
        cmp #$00
        beq .skip_bullet
        sta collision_1_x
        lda oam_ram_y,y
        sta collision_1_y
        jsr detect_collision
        beq .skip_bullet
        clc
        lda enemy_dmg_accumulator
        adc player_gun_str
        sta enemy_dmg_accumulator
	; despawn bullet
	lda #$00
        sta oam_ram_x,y
        lda #$ff
        sta oam_ram_y,y
.skip_bullet
	iny
        iny
        iny
        iny
        cpy #$20
        bne .bullet_loop
        ldy temp00
        rts
        

        
        
; bullets are sprites #$03 - #$07 
;;; bullet directions, sprite base address
; 03   9 o'clock -7,  0, $020c
; 04  10 o'clock -6, -3, $0210
; 05   8 o'clock -6. +3, $0214
; 06  11 o'clock -3, -6, $0218
; 07   7 o'clock -3, +6, $021c

player_gun_bullet_dir_table:
	.byte #248, #0
        .byte #249, #252
        .byte #252, #6
        .byte #249, #3
        .byte #252, #249
        
player_gun_fire: subroutine
	; temp00 holds five_directions == true
	ldx #$00
        ldy #$0c
.bullet_loop
	lda oam_ram_y,y
        ; check if bullet is spawned
        cmp #$ff
        bne .next
        ; trigger pewpew
	jsr sfx_pewpew
        lda player_x_hi
        sta oam_ram_x,y
        lda player_y_hi
        clc
        adc #$04
        sta oam_ram_y,y
        ; direction
        lda temp00
        beq .one_direction
.five_directions
        lda player_gun_bullet_dir_table,x
        sta bullet_x_vel,x
        lda player_gun_bullet_dir_table+1,x
        sta bullet_y_vel,x
        bne .dir_done
.one_direction
        lda player_gun_bullet_dir_table
        sta bullet_x_vel,x
        lda player_gun_bullet_dir_table+1
        sta bullet_y_vel,x
.dir_done
        ; sprite
        lda #$79
        sta oam_ram_spr,y
        ; palette
        lda #$00
        sta oam_ram_att,y
        jmp .done
.next
	jsr player_bullet_next
        cpy #$20
        bne .bullet_loop
.done
	rts
        
        
        
player_bullets_check_controls: subroutine
	lda #$01
        sta temp00
	; check for r_bag status
        lda r_bag_counter
        cmp #$02
        bcc .not_r_bag_turbo
        jsr player_gun_fire
        dec r_bag_counter
        jmp .done
.not_r_bag_turbo
	; check if a button is pressed
        lda player_a
        cmp #$ff
        bne .not_turbo
        ; damage from turbo gun
	lda wtf
        and #$02
        cmp #$02
        bne .no_turbo_damage
        lda #$03
        sta player_damage
        jsr player_take_damage
.no_turbo_damage
        jsr player_gun_fire
        jmp .done
.not_turbo
	; check if b button has been pressed
        lda r_bag_counter
        cmp #$00
        beq .no_r_bag_rapid
        lda player_b
        cmp #$ff
        bne .done
        lda wtf
        and #$0f
        beq .normal_fire
.no_r_bag_rapid
	lda player_b_d
        cmp #$ff
        bne .done
.normal_fire
	lda #$00
        sta temp00
        jsr player_gun_fire
.done
	rts
        
        

        
        
player_bullets_update: subroutine
	ldx #$00
        ldy #$0c
.bullet_loop
	; handle mask shield
        cpx #$00
        bne .mask_check_done
        lda mask_shield
        beq .mask_check_done
        jmp player_bullets_update_mask_shield
.mask_check_done
	; check if spawned
	lda oam_ram_y,y
        cmp #$ff
        beq .next
        ; check for despawn
        ; is x < 8
	lda oam_ram_x,y
        cmp #$08
        bcc .despawn
        ; is y > 180
	lda oam_ram_y,y
        cmp #180
        bcs .despawn
	; move x
	lda oam_ram_x,y
        clc
        adc bullet_x_vel,x
        sta oam_ram_x,y
        ; move y
	lda oam_ram_y,y
        clc
        adc bullet_y_vel,x
        sta oam_ram_y,y
        jmp .next
.despawn
        lda #$ff
        sta oam_ram_x,y
        sta oam_ram_y,y
player_bullets_update_next:
.next
	jsr player_bullet_next
        cpy #$20
        bne .bullet_loop
.done
	rts

player_bullets_update_mask_shield: subroutine
	sty temp00
        ldy mask_shield
.mask_shield_velocity_loop
        inc bullet_x_vel,x
        dey
        bne .mask_shield_velocity_loop
        ldy temp00
        ; calc x
        lda player_x_hi
        sec
        sbc #$1c
        sta temp00
        lda bullet_x_vel,x
        lsr
        tax
        lda sine_6bits,x
        clc
        adc temp00
        sta oam_ram_x,y
        ; calc y
        ldx #$00
        lda player_y_hi
        sec
        sbc #16
        sta temp00
        lda bullet_x_vel,x
        clc
        adc #$40
        lsr
        tax
        lda sine_5bits,x
        clc
        adc temp00
        sta oam_ram_y,y
        ; set attributes
        lda #$03
        sta oam_ram_att,y
        ; set sprites
        lda #$24
        sta oam_ram_spr,y
        ldx #$00
        jmp player_bullets_update_next