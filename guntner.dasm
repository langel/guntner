
	include "nesdefs.dasm"
	include "zp_vars.asm"

;;;;; RAM NOTES
; $000 zero page
; $100 6502 stack
; $200 PPU OAM sprite data
; $300 entity data
; $400-7ff sine scale tables

spare_stack	EQU	$150
top_of_stack	EQU	$1e0
;unused_ram	EQU	$3e0
;more_free_ram	EQU	$400
end_of_ram 	EQU 	$0800


;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,1,1,NES_MIRR_VERT ; mapper 0, 1 PRGs, 1 CHR


;;;;; START OF CODE

cart_start:	subroutine
	NES_INIT	; set up stack pointer, turn off PPU
        
; CLEAR CPU RAM
        jsr ClearRAM	; clear RAM
        jsr apu_init

; MY SETUP
     	; setup rng
        lda #$01
        sta rng0
        sta rng1
        lda #$ff
        sta rng2
        
        lda #232
        sta scroll_y ; just seems right
        ; set hud y pos
        lda #182
        sta sprite_0_y
        
        jsr sine_init
        
        jsr palette_init
        jsr starfield_twinkle_reset
        
        jsr nametables_clear
        jsr sprite_clear
	jsr player_game_reset
        
        lda #>arctang_velocity_tables
        sta arctang_velocity_hi
        
        lda #$c0
        sta scroll_to_counter
        
; set default player colors
	lda #$14
        sta player_color0
	lda #$21
        sta player_color1
	lda #$37
        sta player_color2
	jsr player_update_colors
        
        
;============================== M O D E   I N I T   H E R E
	;jsr game_init
	;jsr menu_screens_init
        ;jsr demo_init
        ;jsr cut_scene_00_init
        ;lda #$0a
        ;sta game_mode
        
        ;jsr options_screen_init
        jsr sandbox_init
   	;jsr sandbox2_init
        
        ; XXX why does this need to exist here?
        ;     shouldn't render_enable handle this?
        lda #MASK_BG|MASK_SPR
        sta ppu_mask_cache
        
        
.endless
	jmp .endless	; endless loop



        
        


;;;;; INTERRUPT HANDLERS

nmi_handler: subroutine

	; ~2250 cycles for PPU access (PAL is 7450 cycles)
        ; "On NTSC, count on being able to copy 160 bytes 
        ; to nametables or the palette using a moderately 
        ; unrolled loop"
        ; write 64 tiles?
        ; write all palettes
        ; oam dma

	SAVE_REGS ; 13 cycles
        
; enable NMI lockout
	lda nmi_lockout
        cmp #$00
        beq .no_lock
        jmp .nmi_end
.no_lock
        inc nmi_lockout
        
; PPU vBLANK STUFF
	; RENDER	va cycles
        jmp (state_render_addr_lo)
state_render_done:
	; OAM DMA	513 cycles
	lda #$02
        sta PPU_OAM_DMA
        ; PALETTE	236 cycles
        jsr palette_render
	; SCROLL POS	17 cycles
	bit PPU_STATUS
        lda scroll_x
        sta PPU_SCROLL
        lda scroll_y
        sta PPU_SCROLL
	; NAMETABLE++	9 cycles     
	lda scroll_page
        and #$01
        ora #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL
        lda ppu_mask_cache
        sta PPU_MASK	
        
        ; hope everything above was under
        ; ~2250 cycles!
        
; main game logic
        jmp (state_update_addr_lo)
state_update_done:

sprite0_wait:
	lda state_sprite0
        cmp #$00
        beq sprite0_done
	; wait for Sprite 0; SPRITE 0 WAIT TIME!!!
.wait0	bit PPU_STATUS
        bvs .wait0
        lda #$c0
.wait1	bit PPU_STATUS
        beq .wait1
        
        ; XXX vertical scroll solution
        lda #$26
        sta PPU_ADDR
        lda #$c0
        sta PPU_ADDR
        lda #$00
        sta PPU_SCROLL
        sta PPU_SCROLL
	; HUD POSITIONING
        ; XXX horizontal scroll solution
        ;bit PPU_STATUS
        ;lda #$00
        ;sta PPU_SCROLL
        ;sta PPU_SCROLL
        
	; set bg pos to page 2 for dashboard
	lda #$01|#CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL
        lda #MASK_BG
        sta PPU_MASK	
        
        
        
        ; must be game mode
	jsr player_bullets_update
        jsr starfield_update
        
        ; HUD prepare for next draw
        ; stop updating HUD if game over
        lda player_death_flag
        cmp #$00
        bne sprite0_done
	jsr dashboard_update
        jsr get_enemy_slot_cache_next
sprite0_done:

	; XXX starfield debugger
        ;jsr starfield_debugger
        jsr apu_update
        ; XXX apu debugger
        ;jsr apu_debugger

        jsr player_controls_read
        ;jsr apu_manage
        jsr powerup_bomb_update
        jsr powerup_mushroom_update
        jsr palette_update
	inc wtf	; frame counter  
	jsr timer_update ; update global time
	lda rng0 ; rng updates
        jsr NextRandom
        sta rng0
	lda rng1
        jsr PrevRandom
        sta rng1
	lda rng2
        jsr NextRandom
        sta rng2

; disable NMI lockout
        lda #$00
        sta nmi_lockout
        
.nmi_end
	RESTORE_REGS ; 16 cycles
	rti
        
        
; all includes      

	include "ppu_lib.dasm"
        nop	; how much prg space we using?  
        
	include "state_machine.asm"
        nop	; how much prg space we using?
	include "state_menu_screens.asm"
        nop	; how much prg space we using?
	include "state_cutscenes.asm"
        nop	; how much prg space we using?
	include "mode_demo.asm"
        nop	; how much prg space we using?
	include "mode_game.asm"
        nop	; how much prg space we using?
	include "mode_sandbox.asm"
        nop	; how much prg space we using?
        
	include "state_sandbox2.asm"
        nop	; how much prg space we using?

	include "arctang.asm"
        nop	; how much prg space we using?
	include "collision_detection.dasm"
        nop	; how much prg space we using?
        
	include "dashboard.asm"
        nop	; how much prg space we using?
	include "palette.asm"
        nop	; how much prg space we using?
	include "powerups.asm"
        nop	; how much prg space we using?
	include "sine.dasm"
        nop	; how much prg space we using?
	include "starfield.dasm"
        nop	; how much prg space we using?
        
	include "timer_global.dasm"
        nop	; how much prg space we using?
        
        
	include "enemy_tables.dasm"
        nop	; how much prg space we using?
	include "enemy_handler.dasm"
        nop	; how much prg space we using?

	include "enemy_boss_vamp.asm"
        nop	; how much prg space we using?
        
	include "enemy_ant.asm"
        nop	; how much prg space we using?
	include "enemy_bat.asm"
        nop	; how much prg space we using?
	include "enemy_birb.asm"
        nop	; how much prg space we using?
	include "enemy_chomps.asm"
        nop	; how much prg space we using?
	include "enemy_dart.asm"
        nop	; how much prg space we using?
	include "enemy_dumbface.asm"
        nop
	include "enemy_galger.asm"
        nop
	include "enemy_maggs.asm"
        nop	; how much prg space we using?
	include "enemy_lasso.asm"
        nop	; how much prg space we using?
	include "enemy_skeet.asm"
        nop	; how much prg space we using
	include "enemy_skully.asm"
        nop	; how much prg space we using?
	include "enemy_spark.asm"
        nop	; how much prg space we using?
	include "enemy_starglasses.asm"
        nop	; how much prg space we using?
	include "enemy_throber.asm"
        nop	; how much prg space we using?
	include "enemy_uzi.asm"
        nop	; how much prg space we using?
	include "enemy_zigzag.asm"
        nop	; how much prg space we using?
        
	include "enemy_test.asm"


	include "phases_and_levels.dasm"
        nop	; how much prg space we using?
	include "phase_table.dasm"
        nop	; how much prg space we using?
        
	include "player_main.dasm"
        nop	; how much prg space we using?
	include "player_bullets.dasm"
        nop	; how much prg space we using?
	include "player_controls.dasm"
        nop	; how much prg space we using?
	include "player_movement.dasm"
        nop	; how much prg space we using?
	include "player_demo.asm"
        nop	; how much prg space we using?
        
	include "apu_engine.asm"
        nop	; how much prg space we using?    
	include "apu_sfx.asm"
        nop	; how much prg space we using?

;f6e3 - ant/lasso/throber/uzi
;f37d - new audio engine and powerup sfx
;f162 - rewrote player movement
;f258 - powerups done except sfx
;f267 - vampire done?
;f14c - with arctang now
;e7be
;e8b6 newnewnew
;ea9f bookmark new
;e666 bookmark old
        
; LOOKUP TABLES AT TOP OF RAM
        org $fe00
	include "tables_at_top_of_rom.asm"
        nop	; how much prg space we using?

.	byte "hello n00b good for you n00b n0b"
        nop	; how much prg space we using?

;;;;; CPU VECTORS
	seg Vectors		; segment "Vectors"
	org $fffa		; start at address $fffa
       	.word nmi_handler	; $fffa vblank nmi
	.word cart_start	; $fffc reset
	.word nmi_handler	; $fffe irq / brk

;;;;; GRAPHX
	org $10000
	incbin "guntner.chr"
