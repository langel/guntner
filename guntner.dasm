
	include "nesdefs.dasm"
        

;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0

nmi_lockout	byte
scroll_x	byte
scroll_page	byte
scroll_y	byte
Temp		byte
bg_tile_default	byte
player_x	byte
player_y	byte
player_demo_x	byte
player_demo_y	byte
rng0		byte
rng1		byte
rng2		byte
starfield_col	byte
starfield_rng	byte
starfield_page	byte
starfield_tile	byte
starfield_col0	byte
starfield_col1	byte
bullet_cooldown byte ; count frames until next bullet
collision_0_x	byte
collision_0_y	byte
collision_0_w	byte
collision_0_h	byte
collision_1_x	byte
collision_1_y	byte
collision_1_w	byte
collision_1_h	byte


	org $380
enemy_x		byte
enemy_y		byte
spin_x		byte
spin_y		byte
trans_x		byte
trans_y		byte
enemy_frame	byte

;;; enemy data struct
; type 0 = no enemy
; health
; x_base
; y_base
; pattern_counter
; animation_frame
; 7 and 8 bytes unassigned
birb_x		byte
birb_y		byte
birb_patt	byte
birb_anim	byte
skully_x	byte
skully_y	byte
skully_patt	byte
skully_anim	byte
maggs_x		byte
maggs_y		byte
maggs_patt	byte
maggs_anim	byte



;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,1,1,NES_MIRR_VERT ; mapper 0, 1 PRGs, 1 CHR

;;;;; START OF CODE

Start:	subroutine
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
; CLEAR CPU RAM
        ldx #$00
        txa
RAM_init_clear:
	sta $000,x
	sta $100,x
	sta $200,x	; PPU OAM sprite data
	sta $300,x	; bullet / enemy data?
	sta $400,x
	sta $500,x
	sta $600,x
	sta $700,x
        inx
        bne RAM_init_clear
;        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
	jsr PPU_init

; MY SETUP
        jsr SetPalette 
        jsr player_bullets_init
	jsr starfield_init
        jsr PleaseStart_plot
     	; setup rng
        lda #$01
        sta rng0
        sta rng1
        lda #$ff
        sta rng2
; set player position
	lda #$d0
        sta player_x
        sta player_demo_x
	lda #$70
        sta player_y
        sta player_demo_y
; set enemy position
	lda #$28
        sta enemy_x
        sta enemy_y
        lda #$40
        sta spin_x
        lda #$00
        sta spin_y
; set birb stuff
	lda #$19
        sta birb_x
        sta birb_y
        sta birb_patt
        sta birb_anim
; set skully stuff
	lda #$80
        sta skully_x
        sta skully_y
        lda #$10
        sta skully_patt
        sta skully_anim
; set maggs stuff
	lda #$20
        sta maggs_x
        sta maggs_y
        sta maggs_patt
        sta maggs_anim
; activate PPU graphics       
	; enable rendering
        lda #MASK_BG|MASK_SPR
        lda #$1e
        sta PPU_MASK	
        ; enable NMI
        lda #$00
        sta nmi_lockout
        lda #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL	
.endless
	jmp .endless	; endless loop



; set palette colors
SetPalette: subroutine
; set PPU address to palette start
	PPU_SETADDR $3f00
        ldy #0
.loop:
	lda Palette00,y	; lookup byte in ROM
	sta PPU_DATA	; store byte to PPU data
        iny		; Y = Y + 1
        cpy #32		; is Y equal to 32?
	bne .loop	; not yet, loop
        rts		; return to caller
       
        

 
; SPRITE HANDLINGS
        
        ; set sprite 0
SetSprite0: subroutine
        lda #158	;y
	sta $200
        lda #$f0	;tile
        sta $201
        lda #$20	;flags
        sta $202
        lda #$01	;xpos
        sta $203
	rts
        
set_player_sprite: subroutine
	lda player_y
        sta $204
        sta $208
        lda player_x
        sta $207
        clc
        adc #$08
        sta $20b
        ldx #$e7 ; set tiles
        stx $205
        dex 
        stx $209
        lda #$40
; attributes
        sta $206
        sta $20a
     	; work towards demo target
        lda player_x
        cmp player_demo_x
        beq set_player_demo_x
        bcs set_player_demo_x_dec
        inc player_x
        jmp set_player_demo_x_done
set_player_demo_x_dec:
	dec player_x
set_player_demo_x_done:
        lda player_y
        cmp player_demo_y
        beq set_player_demo_y
        bcs set_player_demo_y_dec
        inc player_y
        jmp set_player_demo_y_done
set_player_demo_y_dec:
	dec player_y
set_player_demo_y_done:
	rts
        
set_player_demo_x:
	lda rng0
        jsr NextRandom
        sta rng0
        lsr
        clc
        adc #$70
        sta player_demo_x
        jmp set_player_demo_x_done
set_player_demo_y:
	lda rng0
        jsr NextRandom
        sta rng0
        lsr
        clc
        adc #$10
        sta player_demo_y
	jmp set_player_demo_y_done
        
        
	include "enemy_handler.dasm"

        
        
        
        
;;;;; COMMON SUBROUTINES

	include "nesppu.dasm"


;;;;; INTERRUPT HANDLERS

NMIHandler: subroutine
	SAVE_REGS
	lda nmi_lockout
        cmp #$00
        bne .NMI_end
        inc nmi_lockout
; load sprites
	lda #$02
        sta PPU_OAM_DMA
        ; wait for sprite 0
; AFTER GETTING EVERYTHING INTO THE PPU : ::: 
; STARFIELD TIME!!!
	jsr player_bullets_update
	jsr starfield_update
; update scroll pos
	lda scroll_y
        sec
        
  ; SCROLL SPEED
        sbc #$07
        bcs .samepage
        inc scroll_page
.samepage
	sta scroll_y
	lda scroll_page
        and #$01
        ora #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL
; TOP SCROLL
	bit PPU_STATUS
        lda scroll_y
        sta PPU_SCROLL
        lda #$f8
        sta PPU_SCROLL
; SPRITES TIME!!
        jsr SetSprite0
        jsr set_player_sprite
        jsr update_enemies
        
; SPRITE 0 WAIT TIME!!!
.wait0	bit PPU_STATUS
        bvs .wait0
        lda #$c0
.wait1	bit PPU_STATUS
        beq .wait1
        ; reset palette
        ;jsr SetPalette
; HUD POSITIONING
; set PPU_ADDR.1
        bit PPU_STATUS
; set PPU_SCROLL.1
        lda #$00
        sta PPU_SCROLL
; set PPU_SCROLL.2
        lda #$08
        sta PPU_SCROLL
; disable page 2 for HUD
        ora #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL
        lda #$00
        sta nmi_lockout
; rng updates
	lda rng1
        jsr PrevRandom
        sta rng1
	lda rng2
        jsr NextRandom
        sta rng2
.NMI_end
	RESTORE_REGS
	rti
        



        
        
        
        
Palette00:
	hex 1f		;screen color
	hex 02283000	;background 0
        hex 07162400	;background 1
        hex 02113c00	;background 2
        hex 0b1a3b1d	;background 3
        hex 19293900	;sprite 0
        hex 13213000	;sprite 1
        hex 07172700	;sprite 2
        hex 013530	;sprite 3
        
	include "ppu_init.dasm"

	include "player_bullets.dasm"
	include "please_start_screen.dasm"
	include "starfield.dasm"
        
        org $f800
	include "sine.dasm"




;;;;; CPU VECTORS

	NES_VECTORS

;;;;; GRAPHX
	org $10000
	incbin "grafx3.chr"
