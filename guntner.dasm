
	include "nesdefs.dasm"


;;;;; VARIABLES

	seg.u ZEROPAGE
	org $0

nmi_lockout	byte
game_mode	byte
sprite_0_y	byte
scroll_x	byte
scroll_page	byte
scroll_y	byte
scroll_speed	byte
scroll_speed_m	byte
bg_tile_default	byte
player_health	byte
player_lives	byte
player_heal_c	byte
player_demo_x	byte ; dest x for demo cornputer controlls
player_demo_y	byte ; dest y for same
player_demo_lr	byte
player_demo_ud	byte

player_x_hi	byte
player_x_lo	byte
player_y_hi	byte
player_y_lo	byte
player_coll_y	byte ; player_x plus 2 because collision box
player_gun_str	byte
bullet_cooldown byte ; count frames until next bullet
player_speed	byte ; 2 bit value 0..3 translates to 1..4
player_paused	byte
player_controls	byte
player_up	byte
player_up_d	byte
player_right	byte
player_right_d	byte
player_down	byte
player_down_d	byte
player_left	byte
player_left_d	byte
player_select	byte
player_select_d	byte
player_start	byte
player_start_d	byte
player_b	byte
player_b_d	byte
player_a	byte
player_a_d	byte
player_dir_bits	byte ; matches controller
player_boundless	byte

wtf		byte
rng0		byte
rng1		byte
rng2		byte

starfield_col	byte
starfield_rng	byte
starfield_page	byte
starfield_col0	byte
starfield_col1	byte

collision_0_x	byte
collision_0_y	byte
collision_0_w	byte
collision_0_h	byte
collision_1_x	byte
collision_1_y	byte
collision_1_w	byte
collision_1_h	byte

; 24 bit max value : 16777215
score_000000xx	byte
score_0000xx00	byte
score_00xx0000	byte
score_xx000000	byte

timer_frames_1s		byte
timer_frames_10s	byte
timer_seconds_1s	byte
timer_seconds_10s	byte
timer_minutes_1s	byte
timer_minutes_10s	byte

enemy_temp_addr_lo	byte
enemy_temp_addr_hi	byte
enemy_ram_offset	byte
enemy_oam_offset	byte
enemy_slot_id		byte
enemy_temp_temp		byte
enemy_dmg_accumulator	byte
boss_x		byte
boss_y		byte
boss_v0		byte
boss_v1		byte
boss_v2		byte
boss_v3		byte
boss_v4		byte
boss_v5		byte

player_color0	byte
player_color1	byte
player_color2	byte
player_damage		byte
player_death_flag	byte

player_bullet_collision_temp_x	byte

you_dead_counter	byte

phase_kill_count	byte
phase_current		byte
phase_state		byte
phase_temp_addr_lo	byte
phase_temp_addr_hi	byte
phase_end_game		byte

temp00	byte
temp01	byte

pal_uni_bg	byte
pal_bg_0_1	byte
pal_bg_0_2	byte
pal_bg_0_3	byte
pal_bg_1_1	byte
pal_bg_1_2	byte
pal_bg_1_3	byte
pal_bg_2_1	byte
pal_bg_2_2	byte
pal_bg_2_3	byte
pal_bg_3_1	byte
pal_bg_3_2	byte
pal_bg_3_3	byte
pal_spr_0_1	byte
pal_spr_0_2	byte
pal_spr_0_3	byte
pal_spr_1_1	byte
pal_spr_1_2	byte
pal_spr_1_3	byte
pal_spr_2_1	byte
pal_spr_2_2	byte
pal_spr_2_3	byte
pal_spr_3_1	byte
pal_spr_3_2	byte
pal_spr_3_3	byte

sfx_frame_id		byte
sfx_counter		byte
audio_noise_mode	byte
audio_noise_pitch	byte
audio_noise_volume	byte
; XXX these are for music
; XXX could user better names?
audio_frame_counter     byte
audio_root_tone         byte
audio_pattern_pos	byte
audio_pattern_num       byte


title_screen_chord_played	byte
title_screen_color	byte
title_rudy_pos		byte

options_rudy_pos	byte
options_music_on	byte
options_song_id		byte
options_sound_id	byte
options_rudy_color1	byte	
options_rudy_color2	byte

scroll_to_counter	byte

;;;;; RAM NOTES
; $000 zero page
; $100 6502 stack
; $200 PPU OAM sprite data
; $300 entity data


;;;;; NES CARTRIDGE HEADER

	NES_HEADER 0,1,1,NES_MIRR_VERT ; mapper 0, 1 PRGs, 1 CHR


;;;;; START OF CODE

cart_start:	subroutine
	NES_INIT	; set up stack pointer, turn off PPU
        jsr WaitSync	; wait for VSYNC
        ; XXX is this where this belongs?
        ldx #$00
        txa
        sta title_screen_color
        sta title_rudy_pos
; CLEAR CPU RAM
        jsr ClearRAM	; clear RAM
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
        jsr scroll_pos_reset
        jsr apu_init

; MY SETUP
     	; setup rng
        lda #$01
        sta rng0
        sta rng1
        lda #$ff
        sta rng2
        
        jsr sine_init
        
        jsr palette_init
        
        jsr player_bullets_init
        
        jsr nametables_clear
	jsr player_game_reset
        jsr dashboard_init
        jsr dashboard_update
        jsr dashboard_draw
        lda #$c0
        sta scroll_to_counter
;============================== M O D E   I N I T   H E R E
        jsr options_screen_init
        jsr title_screen_init
        ;lda #$0a
        ;sta game_mode
        
        ;jsr options_screen_init
        ;jsr sandbox_init
        
        jsr WaitSync	; wait for VSYNC (and PPU warmup)
; set default player colors
	lda #$14
        sta player_color0
	lda #$21
        sta player_color1
	lda #$37
        sta player_color2
	jsr player_update_colors
        
        
; activate PPU graphics       
	; enable rendering
        lda #MASK_BG|MASK_SPR
        sta PPU_MASK	
        ; enable NMI
        lda #$00
        sta nmi_lockout
        lda #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL	
.endless
	jmp .endless	; endless loop



        
        


;;;;; INTERRUPT HANDLERS

nmi_handler: subroutine

	; ~2250 cycles for PPU access (PAL is 7450 cycles)
        ; "On NTSC, count on being able to copy 160 bytes 
        ; to nametables or the palette using a moderately 
        ; unrolled loop"
        ; write 64 tiles?
        ; write all palettes
        ; oam dma

	SAVE_REGS ; 13 cycles
        
; enable NMI lockout
	lda nmi_lockout
        cmp #$00
        beq .no_lock
        jmp .nmi_end
.no_lock
        inc nmi_lockout
        
; PPU vBLANK STUFF

        ; 236 cycles
        jsr palette_frame_update
        
; load sprites
	; 513 cycles
	lda #$02
        sta PPU_OAM_DMA
        
; main game logic
        jsr mode_handler_vblank
; TOP SCROLL
	bit PPU_STATUS
        lda scroll_y
        sta PPU_SCROLL
        lda #$f8
        sta PPU_SCROLL
        
        ; hope everything above was under
        ; 2250 cycles!
      
; set horizontal scroll position       
	lda scroll_page
        and #$01
        ora #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL
        
; main game logic
        jsr mode_handler_post_vblank
        
; read Player Controls
        jsr player_controls_read
        
; frame counter        
	inc wtf
; update global time
	jsr timer_update 
; rng updates
	lda rng0
        jsr NextRandom
        sta rng0
	lda rng1
        jsr PrevRandom
        sta rng1
	lda rng2
        jsr NextRandom
        sta rng2

; disable NMI lockout
        lda #$00
        sta nmi_lockout
        
.nmi_end
	RESTORE_REGS ; 16 cycles
	rti
        
        
; all includes      

	include "apu_handler.dasm"
        nop	; how much prg space we using?    

	include "ppu_lib.dasm"
        nop	; how much prg space we using?  
        
	include "collision_detection.dasm"
        nop	; how much prg space we using?
        
	include "palette_handler.asm"
        nop	; how much prg space we using?

	include "timer_global.dasm"
        nop	; how much prg space we using?
        
	include "mode_handler.asm"
        nop	; how much prg space we using?
	include "mode_menu_screens.asm"
        nop	; how much prg space we using?
	include "mode_title_screen.asm"
        nop	; how much prg space we using?
	include "mode_options.asm"
        nop	; how much prg space we using?

	include "mode_demo.asm"
        nop	; how much prg space we using?
	include "mode_game.asm"
        nop	; how much prg space we using?
	include "mode_sandbox.asm"
        nop	; how much prg space we using?
        
	include "dashboard.asm"
        nop	; how much prg space we using?
        
	include "starfield.dasm"
        nop	; how much prg space we using?
        
	include "powerups.asm"
        nop	; how much prg space we using?
        
	include "enemy_tables.dasm"
        nop	; how much prg space we using?
	include "enemy_handler.dasm"
        nop	; how much prg space we using?
	include "enemy_bat.asm"
        nop	; how much prg space we using?
	include "enemy_birb.asm"
        nop	; how much prg space we using?
	include "enemy_chomps.asm"
        nop	; how much prg space we using?
	include "enemy_maggs.asm"
        nop	; how much prg space we using?
	include "enemy_skeet.asm"
        nop	; how much prg space we using
	include "enemy_skully.asm"
        nop	; how much prg space we using?
	include "enemy_spark.asm"
        nop	; how much prg space we using?
	include "enemy_starglasses.asm"
        nop	; how much prg space we using?
	include "enemy_zigzag.asm"
        nop	; how much prg space we using?

	include "enemy_boss_vamp.asm"
        nop	; how much prg space we using?


	include "phases_and_levels.dasm"
        nop	; how much prg space we using?
	include "phase_table.dasm"
        nop	; how much prg space we using?
        
	include "player_main.dasm"
        nop	; how much prg space we using?
	include "player_bullets.dasm"
        nop	; how much prg space we using?
	include "player_controls.dasm"
        nop	; how much prg space we using?
	include "player_movement.dasm"
        nop	; how much prg space we using?
	include "player_demo.asm"
        nop	; how much prg space we using?

        
	include "sfx.asm"
        nop	; how much prg space we using?

;e7be
;e8b6 newnewnew
;ea9f bookmark new
;e666 bookmark old
        
; LOOKUP TABLES AT TOP OF RAM
        org $fe00
	include "sine.dasm"
        nop	; how much prg space we using?




;;;;; CPU VECTORS
	seg Vectors		; segment "Vectors"
	org $fffa		; start at address $fffa
       	.word nmi_handler	; $fffa vblank nmi
	.word cart_start	; $fffc reset
	.word nmi_handler	; $fffe irq / brk

;;;;; GRAPHX
	org $10000
	incbin "guntner.chr"
