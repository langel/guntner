


demo_mode: subroutine
	; read user controls even in demo mode!
	jsr player_change_speed
        
        ; start should return to menu in demo mode
        lda player_start_d
        cmp #$ff
        bne .player_check_for_dead
        jsr title_screen_init
        jmp .done_and_paused
        
.player_check_for_dead
	; MOCKUP DEATH SEQUENCE
        lda player_health
        cmp #$00
        bne .player_not_dead
.player_dead
	jmp .player_dead_anim
        
.player_not_dead
	; push the shoot button
        lda timer_frames_10s
        and #$02
        cmp #$02
        bne .dont_shoot
	lda #$ff
        sta player_b_d
        ; spawn enemies
        jsr demo_enemy_spawn
.dont_shoot
        jsr set_player_sprite
; demo flight
	jsr run_player_demo
        lda #$04
        sta player_damage
        
;; XXX FORCE QUICK DEATH
        ;jsr player_take_damage
        
        jmp .done
        
.player_dead_anim
	;jsr player_bullets_despawn
        jsr demo_scroll_speed
        lda player_death_flag
        cmp #$00
        bne .death_already_set
        lda #$01
        sta player_death_flag
        jsr dashboard_you_dead
        jmp .done
.death_already_set
	inc you_dead_counter
        lda you_dead_counter
        cmp #120
        bne .still_dead
        
        ; GO BACK TO TITLE SCREEN 
        ; AFTER DEATH SEQUENCE
        jsr title_screen_init
.still_dead
.done
	jsr player_bullets_update
        jsr update_enemies
.done_and_paused
	rts
        
        
        
demo_enemy_spawn: subroutine
	jsr get_enemy_slot_1_sprite
        cmp #$ff
        beq .no_birb_spawn
        tax
        jsr birb_spawn
.no_birb_spawn
	jsr get_enemy_slot_2_sprite
        cmp #$ff
        beq .no_maggs_spawn
        tax
        jsr maggs_spawn
.no_maggs_spawn
	jsr get_enemy_slot_4_sprite
        cmp #$ff
        beq .no_bigs_spawn
        tax
        lda rng0
        and #$01
        cmp #$00
        beq .spawn_starglasses
        jsr skully_spawn
        jmp .no_bigs_spawn
.spawn_starglasses
        jsr starglasses_spawn
.no_bigs_spawn
	rts
        
        
demo_scroll_speed:
        lda scroll_speed
        cmp #$00
        beq .scroll_slow_done
        dec scroll_speed
	dec scroll_speed_m
        lda scroll_speed_m
        lsr
        lsr
        lsr
        sta scroll_speed
        ; slow down stars
.scroll_slow_done
	rts


        
        
; controls player in demo mode    
run_player_demo: subroutine
	; clear player directions
        lda #$00
        sta player_dir_bits
        ; set flags in y register
        ldy #$00
; check x coordinate
        lda player_x_hi
        cmp player_demo_x
        beq .player_x_equal
        bcs .player_x_greater
.player_x_lesser
	lda player_demo_lr
        cmp #$ff
        beq .player_x_equal
	; go right
        lda #%00000001
        ora player_dir_bits
        sta player_dir_bits
        ;inc player_x_hi
        jmp .player_x_done
.player_x_greater
	lda player_demo_lr
        cmp #$00
        beq .player_x_equal
	; go left
        lda #%00000010
        ora player_dir_bits
        sta player_dir_bits
	;dec player_x_hi
        jmp .player_x_done
.player_x_equal
	iny
.player_x_done
; check y coordinate
        lda player_y_hi
        cmp player_demo_y
        beq .player_y_equal
        bcs .player_y_greater
.player_y_lesser
	lda player_demo_ud
        cmp #$ff
        beq .player_y_equal
	; go down
        lda #%00000100
        ora player_dir_bits
        sta player_dir_bits
        ;inc player_y_hi
        jmp .player_y_done
.player_y_greater
	lda player_demo_ud
        cmp #$00
        beq .player_y_equal
	; go up
        lda #%00001000
        ora player_dir_bits
        sta player_dir_bits
	;dec player_y_hi
        jmp .player_y_done
.player_y_equal
	iny
.player_y_done
; check if both coordinates are met
	cpy #$02
        beq .set_demo_new_target
        jmp .done
.set_demo_new_target

	; set x target
	lda rng0
        jsr NextRandom
        sta rng0
        lsr
        clc
        adc #$60
        sta player_demo_x
        cmp player_x_hi
        bcs .player_going_left
.player_going_right
        lda #$ff
        sta player_demo_lr
        jmp .player_x_dir_done
.player_going_left
	lda #$00
        sta player_demo_lr
.player_x_dir_done
        
        ; set y target
	lda rng0
        jsr NextRandom
        sta rng0
        lsr
        clc
        adc #$10
        sta player_demo_y
        cmp player_y_hi
        bcs .player_going_up
.player_going_down
        lda #$ff
        sta player_demo_ud
        jmp .player_y_dir_done
.player_going_up
	lda #$00
        sta player_demo_ud
.player_y_dir_done

.done
	;lda #%0000110
        ;sta player_dir_bits
	jsr player_move_position
	rts

        
        


