;;;; Constants

; XXX these constants don't need to be in the ROM
STARFIELD_MASK		.byte #%00111111 ; star probability
STARFIELD_COL0_START	.byte #$00
STARFIELD_COL1_START	.byte #$07

starfield_tile	.byte #$0f
starempty_tile	.byte #$20
starfield_sprite	.byte	#$6b

starfield_msg_cache	=	$03e0	; 32 bytes for string data

star_cache		EQU 	208


;	POSSIBLE STARFIELD STATES
;	- basic bg scrolling
;	- basic sprite scrolling
;	- transitions
;		- bg to sprite
;		- sprite to bg


; XXX might could remove hi byte table if all on same page
starfield_update_state_function_lo:
	.byte <starfield_bg_update
	.byte <starfield_spr_update
        .byte <starfield_bg2spr_update
        .byte <starfield_sprmsg_update
        .byte <starfield_spr2bg_update
starfield_update_state_function_hi:
	.byte >starfield_bg_update
	.byte >starfield_spr_update
        .byte >starfield_bg2spr_update
        .byte >starfield_sprmsg_update
        .byte >starfield_spr2bg_update
	        
starfield_update: subroutine
	lda starfield_state
        tax
	lda starfield_update_state_function_lo,x
        sta temp00
	lda starfield_update_state_function_hi,x
        sta temp01
        jmp (temp00)



death_scroll_speed: subroutine
        lda scroll_speed
        beq .scroll_slow_done
        lda wtf
        and #$07
        bne .scroll_slow_done
        ; slow down stars
	dec scroll_speed
.scroll_slow_done
	rts
        
        
starfield_draw_dash_top_bar_nametable0: subroutine
        ; fill page 1 bar for sprite 0 collisions
	PPU_SETADDR dash_page1_top_bar
        lda dash_top_bar_tile
        ldy #$20
.tile_dash_set_page1
        sta PPU_DATA
        dey
        bpl .tile_dash_set_page1
        rts
           
        
        
starfield_scroll: subroutine
	; update scroll pos
	lda scroll_x
        sec
        sbc scroll_speed
        bcs .samepage
        inc scroll_page
        ; XXX pretty sure this does nothing
        ; and gets instantiated with bg2spr_init
        dec starfield_var0 ; XXX need to set this at transition time
        ; XXX ^ should not use state variables unless we own state
.samepage
	sta scroll_x
 	; find starfield column for updating       
        lsr
        lsr
        lsr
        sta starfield_col
        ; set nametable for column updating
        lda scroll_page
        and #$01
        cmp #$00
        bne .scroll_page
        lda #$20
        sta starfield_page
   	jmp .scroll_page_done
.scroll_page
	lda #$24
        sta starfield_page
.scroll_page_done
        rts
        


; XXX this will definitely go before release
starfield_debugger: subroutine
	; dash cache meter is $108-$118
        ; scroll page
        lda scroll_page
        and #1
        clc
        adc #$30
        sta $109
        ; scroll x position
        lda scroll_x
        lsr
        lsr
        lsr
        lsr
        clc 
        adc #$30
        sta $10b
        lda scroll_x
        and #$f
        clc
        adc #$30
        sta $10c
        ; scroll y position
        lda scroll_y
        lsr
        lsr
        lsr
        lsr
        clc 
        adc #$30
        sta $10e
        lda scroll_y
        and #$f
        clc
        adc #$30
        sta $10f
        ; starfield state
        lda starfield_state
        clc
        adc #$30
        sta $111
        ; transition frame
        lda starfield_var0
        clc
        adc #$30
        sta $113
	rts
        
        
        
starfield_bg_render: subroutine
	; copy tiles to PPU VRAM during vblank
;update_starfield_column
        lda #CTRL_INC_32
        sta PPU_CTRL
        ; set base PPU address
	lda starfield_page
        sta PPU_ADDR
        lda starfield_col
        sta PPU_ADDR
; rip from cache to PPU
        ldy #$16
.col_loop
	lda star_cache,y
        sta PPU_DATA
        dey
        bne .col_loop
        ; put that shit back to sequential order
        lda #0
        sta PPU_CTRL
        jsr dashboard_render
        jmp state_render_done
        
        

        
        
        
; XXX are these even used?
starfield_bg2spr_render: subroutine
	; remove bg columns
        jmp state_render_done
starfield_spr2bg_render: subroutine
	; populate bg columns
        jmp state_render_done
        
        
        
   
starfield_bg_init: subroutine
; set starfield state
	lda #$00
        sta starfield_state
; set bg tile palette attributes / colors
; $23c0 and $27c0
        ; page 1 attributes
	PPU_SETADDR $23c0
	lda #%00010100
        ldx #$d8
.23c0_loop
        sta PPU_DATA
        inx
        bne .23c0_loop
        ; COLOR SPLIT
        ; set split color attr for top row
	PPU_SETADDR $23e8
	lda #%11110001
        ldx #$f8
.27e8_loop
        sta PPU_DATA
        inx
        bne .27e8_loop
        ; page 2 attributes
	PPU_SETADDR $27c0
	lda #%00010100
        ldx #$d8
.27c0_loop
        sta PPU_DATA
        inx
        bne .27c0_loop
        ; make sure sprite0 has something to collide with
        jsr starfield_draw_dash_top_bar_nametable0
; draw stars on nametable 1
        lda #CTRL_INC_32
        sta PPU_CTRL
        ;stx starfield_page
	ldx #$00
.draw_stars_loop
        stx starfield_col
        jsr get_next_random
        jsr starfield_cache_next_col
	lda #$20
        sta PPU_ADDR
        lda starfield_col
        sta PPU_ADDR
        ldy #$16
.transfer_loop
	lda star_cache,y
        sta PPU_DATA
        dey
        bne .transfer_loop
        inx
        cpx #$20
        bne .draw_stars_loop
        lda #0
        sta PPU_CTRL
	rts
        

        
        



starfield_bg_update: subroutine
; will not work with scroll speeds above 8
	; precalculate all starfield things post sprite 
	jsr starfield_scroll
        ; twinkle them stars with palette stuff
        jsr starfield_twinkle_colors
        jsr starfield_twinkle_bg
	; XXX hook this up with tile changing later
        ; probably hearts after killing a boss
        ; XXX starfield_tile
        ; #$0f star
        ; #$90 heart
starfield_cache_next_col:
        ; setup rng for star probability
        lda rng0
        lsr
        and STARFIELD_MASK
        sta temp00
      	ldy #$00
.col_assign_tile_loop
	cpy temp00
        bne .empty_tile
.star_tile
	lda starfield_tile
        jmp .cache_tile
.empty_tile
	lda starempty_tile 
.cache_tile
	sta star_cache,y
        iny
        cpy #$16
        bne .col_assign_tile_loop
        rts
        
        
        
        
starfield_bg2spr_init: subroutine
        lda #2
        sta starfield_state
        ; distribute star sprites
	ldx #$80
        lda scroll_x
        and #7
        sta temp00
.loop
	sta oam_ram_x,x
        lda #$ff
        sta oam_ram_y,x
        lda #$08
        clc
        adc temp00
        sta temp00
        inx
        inx
        inx
        inx
        bne .loop
        ; log destination of nametable0 cleared
        lda scroll_x
        sta state_v6
        lda starfield_page
        cmp #$20
        bne .do_the_full_monty
        lda #1
        sta starfield_var0
	rts
.do_the_full_monty
	lda #2
        sta starfield_var0
        rts
        
        
starfield_bg2spr_update: subroutine
	; an initializer needs to set a counter for when
        ; nametable0 is cleared
        
        ; clear left col of nametable starfield
        lda #$20
        ldx #$16
.clear_col_loop
	sta star_cache,x
        dex
        bne .clear_col_loop
        
        ; setup left col of starfield sprite
        jsr starfield_spr_get_position
        jsr starfield_spr_set_next
       
	jsr starfield_scroll
        jsr starfield_spr_update
        jsr starfield_twinkle_bg
        
        ; check if nametable0 is cleared
        lda scroll_x
        cmp state_v6
        bcs .done
        lda starfield_var0
        cmp #0
        bne .done
        ; setup next starfield state
        inc starfield_state
        lda #0
        sta scroll_x
        sta scroll_page
        sta starfield_var0
        lda #4 ; starfield_sprmsg_render
        jsr state_render_set_addr
.done	
	rts
        


        
        
starfield_spr_get_position: subroutine
        lda scroll_x
        lsr
        lsr
        lsr ; col position (range of 32)
        asl
        asl
        clc
        adc #$80
        tax ; oam ram offset
      	stx state_v2
	; scroll_x decides which sprite and x position
        lda scroll_x
        and #$07 ; this is the x position
        sec
        sbc #8
        sta oam_ram_x,x
	rts
        
                
; XXX we might need this in the end?
starfield_spr_init: subroutine
	; set that state
	lda #$01
        sta starfield_state
        lda #$03
        jsr state_render_set_addr
        ; work with top half of sprites
	lda #$80
        sta temp00
        lda #$00
        sta temp01
.set_each_star
	; temp00 holds oam ram offset
        ; temp01 holds x position
        ldx temp00
        lda temp01
        sta oam_ram_x,x
        jsr starfield_spr_set_next
.forward_loop
        ; next loop
        lda #$08
        clc
        adc temp01
        sta temp01
        lda #$04
        clc
        adc temp00
        sta temp00
        bcc .set_each_star
        jsr nametables_clear
        ; XXX this might need a state variable set to a tile
        jsr starfield_tile_left_border
	rts
        
        
starfield_spr_update: subroutine
        ; twinkle them stars with palette stuff
        jsr starfield_twinkle_colors
        jsr starfield_twinkle_spr
        ; cycle through all star sprites
	lda #$80
        sta temp00
.scroll_loop
	ldx temp00
        lda oam_ram_x,x
        clc
        adc scroll_speed
        sta oam_ram_x,x
        bcc .dont_update_star
        jsr starfield_spr_set_next
.dont_update_star
        lda #$04
        clc
        adc temp00
        sta temp00
        bcc .scroll_loop
	rts
        
                
starfield_spr_set_next: subroutine
	; decides if a star exists and its y pos, spr, att
        ; x = oam offset
        jsr get_next_random
        lsr
        and STARFIELD_MASK
        cmp #$16
        bcc .is_star
.no_star
        lda #$ff
        sta oam_ram_y,x
        rts
.is_star
	asl
        asl
        asl
        clc
        adc #$08
        sta oam_ram_y,x
        lda starfield_sprite
        sta oam_ram_spr,x
        ; set spr pal based on x position
	txa
        lsr
        lsr
        lsr
        and #1
        clc
        ; $20 = behind bg tiles
        ; $02 = use sprite palettes 2 and 3
        adc #$22
        sta oam_ram_att,x
        rts
        
        


        
starfield_sprmsg_render: subroutine
	; state_v7 is a state counter
        ; state_v0 nametable high address
        ; state_v1 nametable low address
        ; write from msg_cache to nametable
	lda starfield_var0
        cmp #0
        bne .not_tile_left_border
        jsr starfield_tile_left_border
        jsr dashboard_render
        jmp state_render_done
.not_tile_left_border
	lda state_v1
        sta PPU_ADDR
	lda state_v0
        sta PPU_ADDR
        ldx #31
.sprmsg_loop
        lda starfield_msg_cache,x
        sta PPU_DATA
        dex
        bne .sprmsg_loop
        jsr dashboard_render
        jmp state_render_done


starfield_sprmsg_update: subroutine
        jsr starfield_spr_update
	lda starfield_var0
        tax
        lda starfield_msgscroll_setup_table_lo,x
        sta temp00
        lda starfield_msgscroll_setup_table_hi,x
        sta temp01
        inc starfield_var0
        jmp (temp00)
starfield_msgscroll_setup_table_lo:
	.byte <starfield_msgscroll_setup_clear_msg_cache	; 1	; 1
        .byte <starfield_msgscroll_setup_clear_dash_space	; 2
        .byte <starfield_msgscroll_setup_clear_dash_space	; 3
        .byte <starfield_msgscroll_setup_clear_dash_space	; 4
        .byte <starfield_msgscroll_setup_clear_dash_space	; 5
        .byte <starfield_msgscroll_setup_clear_dash_space	; 6
        .byte <starfield_msgscroll_setup_clear_dash_space	; 7
        .byte <starfield_msgscroll_setup_populate_message	; 8
        .byte <starfield_msgscroll_setup_populate_message	; 9
        .byte <starfield_msgscroll_setup_populate_message	; a
        .byte <starfield_msgscroll_scrollup			; b
        .byte <starfield_msgscroll_wait				; c
        .byte <starfield_msgscroll_upandout			; d
	.byte <starfield_msgscroll_setup_clear_msg_cache	; e	; e
        .byte <starfield_msgscroll_cleanup_msg			; f
        .byte <starfield_msgscroll_cleanup_msg			; 10
        .byte <starfield_msgscroll_cleanup_reinstate_dash	; 11
        .byte <starfield_msgscroll_done				; 12
starfield_msgscroll_setup_table_hi:
	.byte >starfield_msgscroll_setup_clear_msg_cache	; 1	; 1
        .byte >starfield_msgscroll_setup_clear_dash_space	; 2
        .byte >starfield_msgscroll_setup_clear_dash_space	; 3
        .byte >starfield_msgscroll_setup_clear_dash_space	; 4
        .byte >starfield_msgscroll_setup_clear_dash_space	; 5
        .byte >starfield_msgscroll_setup_clear_dash_space	; 6
        .byte >starfield_msgscroll_setup_clear_dash_space	; 7
        .byte >starfield_msgscroll_setup_populate_message	; 8
        .byte >starfield_msgscroll_setup_populate_message	; 9
        .byte >starfield_msgscroll_setup_populate_message	; a
        .byte >starfield_msgscroll_scrollup			; b
        .byte >starfield_msgscroll_wait				; c
        .byte >starfield_msgscroll_upandout			; d
	.byte >starfield_msgscroll_setup_clear_msg_cache	; e	; e
        .byte >starfield_msgscroll_cleanup_msg			; f
        .byte >starfield_msgscroll_cleanup_msg			; 10
        .byte >starfield_msgscroll_cleanup_reinstate_dash	; 11
        .byte >starfield_msgscroll_done				; 12
        
starfield_msgscroll_setup_clear_msg_cache: subroutine
	; frame 1 / e
        ldx #0
        lda #$20
.loop
        sta starfield_msg_cache,x
        inx
        cpx #$20
        bne .loop
        lda #MASK_BG|MASK_SPR|MASK_SPR_CLIP|MASK_BG_CLIP
        sta ppu_mask_cache
        rts



starfield_dashboard_rows_table_hi:
	.byte $22, $22, $23, $23, $23, $23
starfield_dashboard_rows_table_lo:
	.byte $c1, $e1, $01, $21, $41, $61
starfield_msgscroll_setup_clear_dash_space: subroutine
	; frame 2-7
	ldx starfield_var0
        dex
        dex ; off by 1? this works!
        lda starfield_dashboard_rows_table_lo,x
        sta state_v0
        lda starfield_dashboard_rows_table_hi,x
        sta state_v1
	rts

starfield_sprmsg_table:
        .byte "       PHASE 1x COMPLETED       "	; 2100
        .byte "       moar text for test       "	; 2140
        .byte "       no i won't shutup        "	; 2180
starfield_sprmsg_rows_table:
	.word $2101, $2141, $2181
starfield_msgscroll_setup_populate_message: subroutine
	; frame 8-a
	lda #$61
        sta scroll_y
        lda starfield_var0
        sec
	sbc #8
        sta temp00
        ; load message
        asl
        asl
        asl
        asl
        asl
        tax
        ldy #32
.msg_loop
	lda starfield_sprmsg_table,x
        sta starfield_msg_cache,y
        inx
        dey
        bne .msg_loop
        ; load nametable address
        lda temp00
        asl
        tax
        lda starfield_sprmsg_rows_table,x
        sta state_v0
        inx
        lda starfield_sprmsg_rows_table,x
        sta state_v1
        ; set start scroll position for next msgscroll step
        lda #$80
       	sta state_v6
        rts
 	; scroll from $61 to $ef? maybe $f8?
        
        
starfield_msgscroll_scrollup: subroutine
	; frame b
	; uses state_v6 for sine offset position
        ; animate sine pos $80 to $40
        ldx state_v6
        lda sine_table,x
        sec
        sbc #$10
        sta scroll_y
        ldx state_v6
        dex
        dex
        cpx #$40
        beq .next_msgscroll_step
        stx state_v6
        ; keep msgscroll step locked here until done
        dec starfield_var0
.next_msgscroll_step
	rts
        
starfield_msgscroll_wait: subroutine
	; frame c
        ; hold 2 seconds?
        inc state_v6
        lda #160
        cmp state_v6
        beq .next_msgscroll_step
        ; keep msgscroll step locked here until done
        dec starfield_var0
.next_msgscroll_step
	rts
        
starfield_msgscroll_upandout: subroutine
	; frame d
        ; animate sine pos $c0 to $90
        ldx state_v6
        lda sine_table,x
        sta scroll_y
        dex
        dex
        dex
        cpx #$88
        bcc .next_msgscroll_step
        stx state_v6
        ; keep msgscroll step locked here until done
        dec starfield_var0
.next_msgscroll_step
	rts
        
starfield_msgscroll_cleanup_msg: subroutine
	; frame f-10 (frame e clears out bottom row)
	lda starfield_var0
        sec
        sbc #$0f
        asl
        tax
        lda starfield_sprmsg_rows_table,x
        sta state_v0
        inx
        lda starfield_sprmsg_rows_table,x
        sta state_v1
	rts
        
starfield_msgscroll_cleanup_reinstate_dash: subroutine
	; frame 11
	; XXX redundant with starfield_draw_dash_top_bar_nametable0
        lda #>dash_page1_top_bar
        sta state_v1
        sta state_v4
        lda 1+#<dash_page1_top_bar
        sta state_v0
        sta state_v5
        lda dash_top_bar_tile
        ldy #$20
.loop
	sta starfield_msg_cache,y
        dey
        bne .loop
        lda #232
        sta scroll_y
        lda #MASK_BG|MASK_SPR
        sta ppu_mask_cache
        rts
        
starfield_msgscroll_done: subroutine
	; frame 12
        ; move to the next starfield state WOW
        lda #2
        jsr state_render_set_addr ; starfield_bg_render
	lda #4
        sta starfield_state ; starfield_spr2bg_update
        lda #8
        sta scroll_x
        lda #$ff
        sta state_v6 ; countdown to sprites done eliminating
        rts
        
        

        

        
starfield_spr2bg_update: subroutine
	; set bg close to 0
        ; start populating columns
        ; free sprites as they leave to the right
        jsr starfield_bg_update     
        jsr starfield_spr_update
        ; cycle through all star sprites
        ; if x < 8 move off screen
	lda #$80
        sta temp00
.loop
	ldx temp00
        lda oam_ram_x,x
        cmp #8
        bcs .keep_it_for_now
        lda #$ff
        sta oam_ram_y,x
.keep_it_for_now
	lda #$04
        clc
        adc temp00
        sta temp00
        bcc .loop
        lda state_v6
        sec
        sbc scroll_speed
        sta state_v6
        bcs .done
.goto_next_state
        lda #0
        sta starfield_state ; starfield_bg_update
        ; XXX these needs to be more generic/abstract
        jsr sandbox2_phase_next
.done
        rts
        
        
        
        
                
starfield_tile_left_border: subroutine
        ; make sure sprite0 has something to collide with
        PPU_SETADDR $2000
        ; update column
        lda #CTRL_INC_32
        sta PPU_CTRL
        lda #$1d ; col1 block
        ldx #$20
.col_loop
        sta PPU_DATA
        dex
        bne .col_loop
        ; put PPU address counter back to normal
        lda #CTRL_INC_1
        sta PPU_CTRL
        rts
        
        
        
        
starfield_twinkle_reset: subroutine
	lda STARFIELD_COL0_START
        sta starfield_col0
        lda STARFIELD_COL1_START
        sta starfield_col1
	rts
        
        
starfield_twinkle_colors: subroutine
        lda starfield_col0
        jsr palette_next_rainbow_color
        sta starfield_col0
        lda starfield_col1
        jsr palette_next_rainbow_color
        sta starfield_col1
	rts
        
starfield_twinkle_bg: subroutine
	lda starfield_col0
        sta pal_bg_0_1
        clc
        adc #$21
        sta pal_bg_0_2
        adc #$0d
        sta pal_bg_0_3
        lda starfield_col1
        sta pal_bg_1_1
        clc
        adc #$21
        sta pal_bg_1_2
        adc #$0d
        sta pal_bg_1_3
	rts
        
starfield_twinkle_spr: subroutine
        lda starfield_col0
        sta pal_spr_2_1
        clc
        adc #$21
        sta pal_spr_2_2
        adc #$0d
        sta pal_spr_2_3
        lda starfield_col1
        sta pal_spr_3_1
        clc
        adc #$21
        sta pal_spr_3_2
        adc #$0d
        sta pal_spr_3_3
	rts
