        
        

; playfield = 256 x 192
; player coordinates should be bound from 16 x 16 to 240 x 176
player_move_position: subroutine

	jsr player_direction_handler
        ; check for boundless
        lda player_boundless
        bne .done
        ; XXX would min() and max() functions save space?
        lda player_x_hi
        cmp #18
        bcs .right_enuff
        lda #18
        sta player_x_hi
.right_enuff

        lda player_x_hi
        cmp #221
        bcc .left_enuff
        lda #221
        sta player_x_hi
.left_enuff

        lda player_y_hi
        cmp #8
        bcs .down_enuff
        lda #8
        sta player_y_hi
.down_enuff

        lda player_y_hi
        cmp #174
        bcc .up_enuff
        lda #174
        sta player_y_hi
.up_enuff
.done
	rts



        
        
player_direction_handler: subroutine
	; shroom handling
	lda shroom_counter
        beq .not_shrooming
        ; shroom right
        lda #%0010000
        bit shroom_mod
        bne .shroom_not_right
        dec player_x_hi
.shroom_not_right
        ; shroom left
        lda #%0001000
        bit shroom_mod
        bne .shroom_not_left
        inc player_x_hi
.shroom_not_left
        ; shroom up
        lda #%0000010
        bit shroom_mod
        bne .shroom_not_up
        dec player_y_hi
.shroom_not_up
        ; shroom down
        lda #%0000100
        bit shroom_mod
        bne .shroom_not_down
        inc player_y_hi
.shroom_not_down
.not_shrooming
        ; get diagonal or not
        lda #$00
        sta temp00
        lda player_dir_bits
        and #%0011
        beq .not_left_or_right
        inc temp00
.not_left_or_right
	lda player_dir_bits
        and #%1100
        beq .not_up_or_down
        inc temp00
.not_up_or_down
	lda temp00
        bne .direction_found
        rts
.direction_found
	sec
        sbc #1 ; 1 for diagonal detection 
        asl
        asl
	; get speed
	clc
        adc player_speed
        tax 
        ; get add/sub for each axis
; LEFT
        lda player_dir_bits
        and #%0001
        bne .not_left
        lda player_x_lo
        sec
        sbc player_direction_speed_table_lo,x
        sta player_x_lo
	lda player_x_hi
        sbc player_direction_speed_table_hi,x
        sta player_x_hi
.not_left
; RIGHT
        lda player_dir_bits
        and #%0010
        bne .not_right
        lda player_x_lo
        clc
        adc player_direction_speed_table_lo,x
        sta player_x_lo
	lda player_x_hi
        adc player_direction_speed_table_hi,x
        sta player_x_hi
.not_right
; UP
        lda player_dir_bits
        and #%0100
        bne .not_up
        lda player_y_lo
        sec
        sbc player_direction_speed_table_lo,x
        sta player_y_lo
	lda player_y_hi
        sbc player_direction_speed_table_hi,x
        sta player_y_hi
.not_up
; DOWN
        lda player_dir_bits
        and #%1000
        bne .not_down
        lda player_y_lo
        clc
        adc player_direction_speed_table_lo,x
        sta player_y_lo
	lda player_y_hi
        adc player_direction_speed_table_hi,x
        sta player_y_hi
.not_down
	rts
        




;      straight/ diag
;speed 1  0.75 / 0.53
;speed 2  1.00 / 0.7071
;speed 3  1.75 / 1.2374
;speed 4  2.50 / 1.7677

	; speeds 1 .. 4
player_direction_speed_table_hi:
	; straight values
        byte #1, #2, #2, #3
        ; diagonal values
        byte #1, #1, #2, #2
player_direction_speed_table_lo:
	; straight values
        byte #192, #64, #223, #128
        ; diagonal values
        byte #61, #151, #8, #122
        
        

; old version
;speed 3  2.25 / 1.5909
;speed 4  3.50 / 2.4748

; 1 / 256 = 0.00390625

        
        ; OG speeds
        
        ; speed 1
        ;byte #191,#0,#135,#0
        ; speed 2
        ;byte #0,#1,#181,#0
        ; speed 3
        ;byte #192,#1,#61,#1
        ; speed 4
        ;byte #128,#2,#197,#1
        