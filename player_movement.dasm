

; controllers
; 8) bit 3 up
; 4) bit 2 down
; 2) bit 1 left
; 1) bit 0 right

; a then thats up + left
; 5 then thats down + right




;      straight/ diag
;speed 1  0.75 / 0.53
;speed 2  1.00 / 0.7071
;speed 3  1.75 / 1.2374
;speed 4  2.50 / 1.7677

; old version
;speed 3  2.25 / 1.5909
;speed 4  3.50 / 2.4748

; 1 / 256 = 0.00390625

player_direction_speed_table:
	; lo byte then hi byte
        ; straight value then diagonal value
        ; speed 1
        byte #192,#1,#61,#1
        ; speed 2
        byte #64,#2,#151,#1
        ; speed 3
        byte #223,#2,#8,#2
        ; speed 4
        byte #128,#3,#122,#2
        
        
        ; XXX OG speeds
        ; speed 1
        ;byte #191,#0,#135,#0
        ; speed 2
        ;byte #0,#1,#181,#0
        ; speed 3
        ;byte #192,#1,#61,#1
        ; speed 4
        ;byte #128,#2,#197,#1
        
        ; old speed 3
        ;byte #64,#2,#151,#1
        ; old speed 4
        ;byte #128,#3,#122,#2
        
        ; speed 1
        byte #192,#1,#61,#1
        
        

; playfield = 256 x 192
; player coordinates should be bound from 16 x 16 to 240 x 176
player_move_position: subroutine

	jsr player_direction_handler
        
        ; XXX boundless is enabled after game win
        ;     need a check for that here
        lda player_x_hi
        cmp #28
        bcs .right_enuff
        lda #28
        sta player_x_hi
.right_enuff

        lda player_x_hi
        cmp #221
        bcc .left_enuff
        lda #221
        sta player_x_hi
.left_enuff

        lda player_y_hi
        cmp #8
        bcs .down_enuff
        lda #8
        sta player_y_hi
.down_enuff

        lda player_y_hi
        cmp #174
        bcc .up_enuff
        lda #174
        sta player_y_hi
.up_enuff

	; add 2 to y position for collision detection
	lda player_y_hi
        clc
        adc #$02
	sta player_coll_y

	rts

player_invert_controls_table:
	.byte #%0000 ; 0 not a thing
        .byte #%0010 ; 1 right is left
        .byte #%0001 ; 2 left is right
        .byte #%0011 ; 3 not a thing
        .byte #%1000 ; 4 down is up
        .byte #%1010 ; 5 dr is ul
        .byte #%1001 ; 6 dl is ur
        .byte #%0111 ; 7 not a thing
        .byte #%0100 ; 8 up is down
        .byte #%0110 ; 9 ur is dl
        .byte #%0101 ; a ul is dr
        ; XXX probably could delete this
        .byte #%1001 ; b not a thing
        .byte #%1100 ; c not a thing
        .byte #%1101 ; d not a thing
        .byte #%1110 ; e not a thing
        .byte #%1111 ; f not a thing
        
; %0001 right
; %0010 left
; %0100 down
; %1000 up
        

player_direction_handler: subroutine
	lda player_dir_bits
        and #%00001111
        sta player_dir_bits
        cmp #$00
        bne .dir_pressed
	rts
.dir_pressed
	; shroom handling
	lda shroom_counter
        beq .not_shrooming
	ldx player_dir_bits
        lda player_invert_controls_table,x
        sta player_dir_bits
.not_shrooming


	lda player_dir_bits
        cmp #%00001000
        bne .not_up
        jmp player_move_up
.not_up
	lda player_dir_bits
        cmp #%00001001
        bne .not_up_right
        jmp player_move_up_right
.not_up_right
	lda player_dir_bits
        cmp #%00000001
        bne .not_right
        jmp player_move_right
.not_right
	lda player_dir_bits
        cmp #%00000101
        bne .not_down_right
        jmp player_move_down_right
.not_down_right
	lda player_dir_bits
        cmp #%00000100
        bne .not_down
        jmp player_move_down
.not_down
	lda player_dir_bits
        cmp #%00000110
        bne .not_down_left
        jmp player_move_down_left
.not_down_left
	lda player_dir_bits
        cmp #%0000010
        bne .not_left
        jmp player_move_left
.not_left
	lda player_dir_bits
        cmp #%00001010
        bne .not_up_left
        jmp player_move_up_left
.not_up_left
	rts



player_move_up: subroutine
	lda player_speed
        asl
        asl
        tay
        ; do y
        lda player_y_lo
        sec
        sbc player_direction_speed_table,y
        sta player_y_lo
	lda player_y_hi
        iny
        sbc player_direction_speed_table,y
        sta player_y_hi
	lda #$ff
	rts
        
player_move_up_right: subroutine
	lda player_speed
        asl
        asl
        tax
        inx
        inx
        txa
        tay
        ; do x
        lda player_x_lo
        clc
        adc player_direction_speed_table,x
        sta player_x_lo
	lda player_x_hi
        inx
        adc player_direction_speed_table,x
        sta player_x_hi
	; do y
        lda player_y_lo
        sec
        sbc player_direction_speed_table,y
        sta player_y_lo
	lda player_y_hi
        iny
        sbc player_direction_speed_table,y
        sta player_y_hi
	rts
        
player_move_right: subroutine
	lda player_speed
        asl
        asl
        tax
        ; do x
        lda player_x_lo
        clc
        adc player_direction_speed_table,x
        sta player_x_lo
        inx
	lda player_x_hi
        adc player_direction_speed_table,x
        sta player_x_hi
.no_x_rollover
	rts
        
player_move_down_right: subroutine
	lda player_speed
        asl
        asl
        tax
        inx
        inx
        txa
        tay
        ; do x
        lda player_x_lo
        clc
        adc player_direction_speed_table,x
        sta player_x_lo
	lda player_x_hi
        inx
        adc player_direction_speed_table,x
        sta player_x_hi
	; do y
        lda player_y_lo
        clc
        adc player_direction_speed_table,y
        sta player_y_lo
	lda player_y_hi
        iny
        adc player_direction_speed_table,y
        sta player_y_hi
	rts
        
player_move_down: subroutine
	lda player_speed
        asl
        asl
        tax
        tay
	; do y
        lda player_y_lo
        clc
        adc player_direction_speed_table,y
        sta player_y_lo
	lda player_y_hi
        iny
        adc player_direction_speed_table,y
        sta player_y_hi
        bcs .no_y_rollover
.no_y_rollover
	rts
        
player_move_down_left: subroutine
	lda player_speed
        asl
        asl
        tax
        inx
        inx
        txa
        tay
        ; do x
        lda player_x_lo
        sec
        sbc player_direction_speed_table,x
        sta player_x_lo
	lda player_x_hi
        inx
        sbc player_direction_speed_table,x
        sta player_x_hi
        bcc .no_x_rollover
.no_x_rollover
	; do y
        lda player_y_lo
        clc
        adc player_direction_speed_table,y
        sta player_y_lo
	lda player_y_hi
        iny
        adc player_direction_speed_table,y
        sta player_y_hi
        bcs .no_y_rollover
.no_y_rollover
	rts
        
player_move_left: subroutine
	lda player_speed
        asl
        asl
        tax
        ; do x
        lda player_x_lo
        sec
        sbc player_direction_speed_table,x
        sta player_x_lo
	lda player_x_hi
        inx
        sbc player_direction_speed_table,x
        sta player_x_hi
        bcc .no_x_rollover
.no_x_rollover
	rts
        
player_move_up_left: subroutine
	lda player_speed
        asl
        asl
        tax
        inx
        inx
        txa
        tay
        ; do x
        lda player_x_lo
        sec
        sbc player_direction_speed_table,x
        sta player_x_lo
	lda player_x_hi
        inx
        sbc player_direction_speed_table,x
        sta player_x_hi
	; do y
        lda player_y_lo
        sec
        sbc player_direction_speed_table,y
        sta player_y_lo
	lda player_y_hi
        iny
        sbc player_direction_speed_table,y
        sta player_y_hi
	rts