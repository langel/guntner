

; reading joypad gives us a byte
; bit 7 a button
; bit 6 b button
; bit 5 select
; bit 4 start
; bit 3 up
; bit 2 down
; bit 1 left
; bit 0 right

; debouncing required for menu
; all keys

; deboucning required for game
; select, start, a


player_change_speed: subroutine
	lda player_select_d
        cmp #$00
        beq .read_select_done
        ; update speed
        inc player_speed
        lda player_speed
        cmp #$04
        bne .read_select_done
        lda #$00
        sta player_speed
.read_select_done
	rts
        
        
player_pause: subroutine
	lda phase_end_game
        cmp #$01
        beq .read_start_done
	lda player_start_d
        cmp #$00
        beq .read_start_done
        lda player_paused
        cmp #$00
        beq .pause
.unpause
	lda #$00
        sta player_paused
        jmp .read_start_done
.pause
	lda #$ff
        sta player_paused
.read_start_done
	rts



player_controls_read: subroutine

;;;;; CONTROLLER READING

	ldy #0
        lda #$01
        sta JOYPAD1,y	; set strobe bit
        lsr        	; now A is 0
        sta JOYPAD1,y	; clear strobe bit
        ldx #8		; read 8 bits
.joy_read_loop:
	pha		; save A (result)
        lda JOYPAD1,y	; load controller state
        lsr        	; bit 0 -> carry
        pla		; restore A (result)
        rol		; carry -> bit 0 of result
        dex		; X = X - 1
        bne .joy_read_loop	; repeat if X is 0
        
        sta player_controls
        ; store directions isolated
        and #%00001111
        sta player_dir_bits 
               
        lda #$01
        sta temp00
        ldx #$00
.joy_interpret_loop:
	lda player_controls
        and temp00
        cmp temp00
        bne .not_pressed
.pressed
	lda player_right,x
        cmp #$00
        bne .not_fresh
        lda #$ff
        sta player_right,x
        sta player_right_d,x
        jmp .button_done
.not_fresh
	lda #$00
        sta player_right_d,x
        jmp .button_done
.not_pressed
	lda #$00
        sta player_right,x
        sta player_right_d,x
.button_done
	inx
        inx
        asl temp00
        bcc .joy_interpret_loop
        rts
