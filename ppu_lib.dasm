
;;;;; SUBROUTINES

ClearRAM: subroutine
	lda #0		; A = 0
        tax		; X = 0
.clearRAM
	sta $0,x	; clear $0-$ff
        cpx #$fe	; last 2 bytes of stack?
        bcs .skipStack	; don't clear it
	sta $100,x	; clear $100-$1fd
.skipStack
	sta $200,x	; clear $200-$2ff
	sta $300,x	; clear $300-$3ff
	sta $400,x	; clear $400-$4ff
	sta $500,x	; clear $500-$5ff
	sta $600,x	; clear $600-$6ff
	sta $700,x	; clear $700-$7ff
        inx		; X = X + 1
        bne .clearRAM	; loop 256 times
        rts


do_nothing: subroutine
	rts

; disable PPU drawing and NMI
render_enable:
        lda #MASK_BG|MASK_SPR
        sta PPU_MASK	
        lda #CTRL_NMI|CTRL_BG_1000
        sta PPU_CTRL	
	rts
        
render_disable:
	lda #$00
        sta PPU_MASK	
        sta PPU_CTRL	
	rts

; wait for VSYNC to start
WaitSync:
	bit PPU_STATUS
	bpl WaitSync
        rts
        

;;;;; RANDOM NUMBERS

get_next_random: subroutine
	lda rng0
        jsr NextRandom
        sta rng0
        rts

NextRandom subroutine
	lsr
        bcc .NoEor
        eor #$d4
.NoEor:
	rts
; Get previous random value
PrevRandom subroutine
	asl
        bcc .NoEor
        eor #$a9
.NoEor:
        rts


nametables_clear:
	ldx #$00
        ldy #$00
        PPU_SETADDR $2000
        lda #$00 ; empty tile
.page_loop
.byte_loop
        sta PPU_DATA
	iny
        bne .byte_loop
        inx
        cpx #$08
        bne .page_loop
        rts
        
        
sprite_clear:
        lda #$ff
        ldx #$00
.clear_sprite_ram
	sta oam_ram_y,x	; PPU OAM sprite data
        inx
        bne .clear_sprite_ram
	rts
        
        
; HEX views
get_char_hi: subroutine
	; a = value in / hex char out
        lsr
        lsr
        lsr
        lsr
        clc
        adc #$30
        rts
get_char_lo: subroutine
	; a = value in / hex char out
        and #$0f
        clc
        adc #$30
        rts
        
        
;;;;; namtetable_tile_planter
;;;;; data set address <address> - set 16-bit PPU address

	MAC NMTP_SETADDR
        lda #>{1}	; upper byte
        sta nametable_tile_planter_addr_hi
        lda #<{1}	; lower byte
        sta nametable_tile_planter_addr_lo
        ENDM
        
nametable_tile_planter:
	ldy #$00
        lda (nametable_tile_planter_addr_lo),y	; upper byte
.tileset_loop
        sta PPU_ADDR
        iny
        lda (nametable_tile_planter_addr_lo),y	; lower byte
        sta PPU_ADDR
        iny
.string_loop
        lda (nametable_tile_planter_addr_lo),y	; read string
        iny
        cmp #$00
        beq .terminate_string
        sta PPU_DATA
        bne .string_loop
.terminate_string
	lda (nametable_tile_planter_addr_lo),y	; look for ff
        cmp #$ff
        bne .tileset_loop
        rts