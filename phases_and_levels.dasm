

;phase_kill_count	byte
;phase_current		byte
;phase_state		byte
;phase_end_game		byte

; phase_state : 0 = still spawning

; level-phase (4 levels)
;	starts at x-1
;	ends at x-9
;	even levels use galgers
;	odd levels spawn other small enemy types
;	x-9 is always a boss fight
;	starglasses spawns at a certain interval
;	larger enemies spawn when?



; OLD DEMO PHASES
; 1: 1 birb
; 2: 2 maggs
; 3: 2 starglasses
; 4: 1 skully
; 5: 2 starglasses, 2 maggs, 4 birbs
; 6: 8 birbs, 4 maggs
; 7: 12 birbs, 3 skullys
; 8: 12 birbs, 1 skully, 2 maggs
; 9: 16 birbs, 6 skullys, 4 maggs, 2 starglasses
        
; NEW GAME LEVEL PHASES PATTERN
; 1: some small enemies
; 2: galger pattern
; 3: some medium enemies
; 4: galger pattern
; 5: constant small spawn -- kill x enemies
; 6: galger pattern
; 7: small, medium, & large spawns
; 8: galger pattern
; 9: boss fight

; NEW GAME PERIODIC LARGE ENEMY SPAWNS
; period could be every so many seconds
; period could vary per level
; each level has a table
; 1: starglasses, starglasses, skully, uzi, starglasses, etc

; every phase has a table for enemy spawns
;	enemy id, enemy count, (repeat); null terminated
;	enemies spawn every 8th frame

; every level has a table for perdiodic enemy spawns
;	enemy id, (repeat); null terminated
;	enemies spawn every nth frame
;	rate could be set by level (and/or difficulty)

        
phase_handler: subroutine
	lda player_health
        cmp #$00
        beq .speed_skip
	; update starfield speed
        lda phase_current
        clc
        adc #$03
        sta scroll_speed
.speed_skip


        
.demo_phase_skip_after_time
        lda wtf
        cmp #$f0
        bne .dont_count
        inc state_v1
        lda #$01
        cmp state_v1
        bne .dont_count
        ; clear all enemies
	lda #$0
        sta wtf
        sta state_v1
        sta enemy_ram_offset
        lda #$20
        sta enemy_oam_offset
.enemy_clear_loop
        jsr enemy_death
        clc
        lda #$08
        adc enemy_ram_offset
        cmp #$80
        beq .enemy_clear_done
        sta enemy_ram_offset
        lda #$04
        clc
        adc enemy_oam_offset
        sta enemy_oam_offset
        bne .enemy_clear_loop
.enemy_clear_done
	lda #0
        sta state_v1
	inc phase_current
        inc phase_state
        jsr sandbox2_phase_next
.dont_count


	; starglasses spawn?
        lda timer_frames_1s
        cmp #$30
        bne .no_starglasses
        lda timer_frames_10s
        cmp #$30
        bne .no_starglasses
        lda timer_seconds_1s
        cmp #$30
        bne .no_starglasses
        jsr get_enemy_slot_4_sprite
        cmp #$ff
        beq .no_starglasses
        tax
        jsr starglasses_spawn
.no_starglasses

        lda phase_current
        and #$01
        bne .phase_current_not_even
        jmp phase_even_update
.phase_current_not_even
	jmp phase_odd_update

phase_even_update: subroutine
	; state_v5 : spawn downcounter
        ; state_v6 : arc sequence id
	lda phase_state
        bne .dont_spawn
	lda wtf
        and #$07
        bne .dont_spawn
        lda state_v5
        beq .dont_spawn
        ; setup arc sequence
        lda phase_current
        
        lsr
        sec
        sbc #1
        tax
        jsr arc_sequence_set
        sta state_v6
        ; actually spawn
        jsr get_enemy_slot_1_sprite
        cmp #$ff
        beq .dont_spawn
        jsr galger_spawn
        lda #$00
        sta enemy_ram_ac,x
        dec state_v5
        bne .dont_spawn
        inc phase_state
.dont_spawn
	rts
        
phase_odd_update: subroutine
	lda phase_state
        bne .dont_spawn
        lda phase_current
        asl
        sta state_v5
.phase_spawn_loop
	jsr get_enemy_slot_1_sprite
        tax
	jsr birb_spawn
        dec state_v5
        bne .phase_spawn_loop
        inc phase_state
.dont_spawn
	rts
        
        
 	; XXX not in use yet
phase_check_end: subroutine
	lda phase_kill_count
        ; cmp to target kill count
        bne .phase_not_done
.phase_next
	; XXX end of phase SFX
	inc phase_current
        ; XXX check if end of game
        lda #$0
        sta phase_kill_count
        sta phase_state
	
.phase_not_done
	rts
        
        

        
        
        
        
	