;;;; Constants

ENEMY_HIT_PALETTE_FRAMES	= #$04

enemy_ram_type = $0300
enemy_ram_hp   = $0301
enemy_ram_x    = $0302
enemy_ram_y    = $0303
enemy_ram_pc   = $0304
enemy_ram_ac   = $0305
enemy_ram_hc   = $0306
enemy_ram_ex   = $0307

oam_ram_x      = $0203
oam_ram_y      = $0200
oam_ram_spr    = $0201
oam_ram_att    = $0202



;;;; enemy types
;	0 = [nothing]
;	1 = starglasses	2x2
;	2 = skully	2x2
;	3 = maggs	2x1
;	4 = birb	1x1
;	5 = bullet0	1x1


	;include "enemy_birb.dasm"

        

sprite_4_set_sprite: subroutine
	; a = top left tile id
        ; y = oam ram offset
	sta oam_ram_spr,y
        clc
        adc #$01
	sta oam_ram_spr+4,y
        adc #$0f
	sta oam_ram_spr+8,y
	adc #$01
	sta oam_ram_spr+12,y
        rts
        
sprite_4_set_sprite_mirror: subroutine
	; a = top left tile id
        ; y = oam ram offset
	sta oam_ram_spr+4,y
        clc
        adc #$01
	sta oam_ram_spr+0,y
        adc #$0f
	sta oam_ram_spr+12,y
	adc #$01
	sta oam_ram_spr+8,y
        rts
	
        
sprite_4_set_x: subroutine
	; a = x pos
        ; y = oam ram offset
	sta oam_ram_x,y
	sta oam_ram_x+8,y
	clc
	adc #$08
	sta oam_ram_x+4,y
	sta oam_ram_x+12,y
	rts
        
sprite_4_set_y: subroutine
	; a = y pos
        ; y = oam ram offset
	sta oam_ram_y,y
	sta oam_ram_y+4,y
	clc
	adc #$08
	sta oam_ram_y+8,y
	sta oam_ram_y+12,y
	rts
        
sprite_4_cleanup_for_next: subroutine
	lda #$04 ; move first sprite over 4 pixels
        clc
	adc $0200+$03,y
        sta $0200+$03,y
	lda #$03 ; move first sprite down 3 pixels
        clc
        adc $0200+$00,y
        sta $0200+$00,y
        ; move other sprites off screen
	lda #$ff
        sta $0200+$04,y
        sta $0200+$08,y
        sta $0200+$0c,y
        sta $0200+$07,y
        sta $0200+$0b,y
        sta $0200+$0f,y
	jmp update_enemies_handler_next
	
        
clear_all_enemies: subroutine
	ldx #$00
        txa
.enemy_loop
	sta enemy_ram_type,x
        inx
        bne .enemy_loop
	ldx #$20
.sprite_loop
	sta $0200,x
        inx
        bne .sprite_loop
        rts
        
        
enemy_death: subroutine
        ; clear OAM data
        lda enemy_oam_offset
        tax
        lda #$ff
        sta oam_ram_x,x
        sta oam_ram_y,x
        sta oam_ram_spr,x
        sta oam_ram_att,x
        ; clear enemy data
        lda #$00
	ldx enemy_ram_offset
        sta enemy_ram_type,x
        sta enemy_ram_x,x
        sta enemy_ram_y,x
        sta enemy_ram_hp,x
        sta enemy_ram_pc,x
        sta enemy_ram_ac,x
        sta enemy_ram_hc,x
        sta enemy_ram_ex,x
        rts
        
        
        
update_enemies: subroutine
	; if player is dead despawn
	lda player_health
        cmp #$00
        beq player_dead_enemies_despawn
	; cycle through all the slots
	lda #$00
        sta enemy_slot_id
        sta enemy_ram_offset
        lda #$20
        sta enemy_oam_offset
.handler_loop
        ldx enemy_ram_offset
	; get enemy type
        lda enemy_ram_type,x
        ; not defined go next slot
        cmp #$00
        beq .handler_next
        asl
        tax
        lda ENEMY_METHODS_LOOKUP_TABLE,x
        sta enemy_temp_addr_lo
        inx
        lda ENEMY_METHODS_LOOKUP_TABLE,x
        sta enemy_temp_addr_hi
        jmp (enemy_temp_addr_lo)
        ;ENEMY_TYPE_SWITCH $01,birb_cycle
update_enemies_handler_next:
.handler_next
        ; go to next enemy slot
        inc enemy_slot_id
	lda #$08
        clc
        adc enemy_ram_offset
        cmp #$e0
        beq .handler_core_end
        sta enemy_ram_offset
.check_for_1_sprite
        ; if ram offset under $80 it is 1 sprite
        lda enemy_oam_offset
        cmp #$60
        bcs .check_for_2_sprites
        clc
        adc #$04
        sta enemy_oam_offset
        jmp .handler_loop
.check_for_2_sprites
        ; if ram offset under $a0 it is 2 sprite
        cmp #$80
        bcs .it_is_4_sprites
        clc
        adc #$08
        sta enemy_oam_offset
        jmp .handler_loop
.it_is_4_sprites      
        ; else it is 4 sprites
        clc
        adc #$10
        sta enemy_oam_offset
        jmp .handler_loop
.handler_core_end
	rts
        
             
player_dead_enemies_despawn: subroutine
	lda player_death_flag
        cmp #$00
        bne .dont_init
        lda #$10
        sta enemy_temp_temp
.dont_init
	inc enemy_temp_temp
	inc enemy_temp_temp
	inc enemy_temp_temp
	lda enemy_temp_temp
        lsr
        lsr
        lsr
        sta enemy_ram_offset
        ldx #$23
.loop
        lda $0200,x
        cmp #$00
        ;beq .do_nothing
        sec
        sbc enemy_ram_offset
        bmi .despawn
        sta $0200,x
        jmp .do_nothing
.despawn
	lda #$ff
        sta $0200-3,x
	lda #$00
        sta $0200,x
.do_nothing
        inx
        inx
        inx
        inx
        cpx #$03
        bne .loop
        rts
        
        

        
        
        
crossbones_cycle: subroutine
	ldx enemy_ram_offset
        inc enemy_ram_hp,x
        lda enemy_ram_hp,x
        lsr
        lsr
        lsr
        sta enemy_ram_y,x
        tay
        ldy enemy_oam_offset
        lda oam_ram_y,y
        sec
        sbc enemy_ram_y,x
        bcc .crossbones_death
        sta oam_ram_y,y
        lda #$0b
        sta oam_ram_spr,y
        lda #$03
        sta oam_ram_att,y
        jmp .crossbones_done
.crossbones_death
        jsr enemy_death
.crossbones_done
	jmp update_enemies_handler_next
        
        
  
                
enemy_get_damage_this_frame: subroutine
	; x = enemy ram offset
        ; y = oam ram offset
	lda #$00
        sta enemy_dmg_accumulator
        jsr player_bullet_collision_handler
	jsr player_collision_detect
        cmp #$00
        beq .no_collision
; handle player collision
	lda enemy_dmg_accumulator
        clc
        adc #$02
        sta enemy_dmg_accumulator
        ; XXX this number is sus
        ; player sprites don't always change at death
        ldy enemy_ram_type,x
        lda ENEMY_PLAYER_COLLISION_TABLE,y
        ldy enemy_ram_ex,x
        sta player_damage
        jsr player_take_damage
        jsr apu_trigger_player_damage
.no_collision
        lda enemy_dmg_accumulator
        cmp #$00
        bne .hit
	lda enemy_ram_hp,x
        rts
.hit
        lda #ENEMY_HIT_PALETTE_FRAMES
	sta enemy_ram_hc,x
	jsr apu_trigger_enemy_damage
	lda enemy_ram_hp,x
        sec
        sbc enemy_dmg_accumulator
        bcc .dead
        sta enemy_ram_hp,x
        rts
.dead
     	lda #$00
        rts
        
        
enemy_set_palette: subroutine
	; checks/handles hit palette counter
        ; a = enemy normal palette
	; x = enemy ram offset
        ; y = oam ram offset
        ; leaves correct palette id in a
        ; can be applied to extra sprites of larger enemy
        sta enemy_temp_temp
        lda enemy_ram_hc,x
        cmp #$00
        beq .use_enemy_palette
.use_hit_palette
	dec enemy_ram_hc,x
	lda #$00
        sta oam_ram_att,y
        rts
.use_enemy_palette
	lda enemy_temp_temp
        sta oam_ram_att,y
        rts
        
enemy_set_palette_mirror: subroutine
	; checks/handles hit palette counter
        ; a = enemy normal palette
	; x = enemy ram offset
        ; y = oam ram offset
        ; leaves correct palette id in a
        ; can be applied to extra sprites of larger enemy
        sta enemy_temp_temp
        lda enemy_ram_hc,x
        cmp #$00
        beq .use_enemy_palette
.use_hit_palette
	dec enemy_ram_hc,x
	lda #$40
        sta oam_ram_att,y
        rts
.use_enemy_palette
	lda enemy_temp_temp
        ora #$40
        sta oam_ram_att,y
        rts
        
        
enemy_give_points: subroutine
        ; a = enemy type
        sta enemy_temp_temp
        inc enemy_temp_temp
        lda enemy_temp_temp
        asl
        clc
        adc enemy_temp_temp
        sta enemy_temp_temp
        dec enemy_temp_temp
        lda enemy_temp_temp
        tax
        lda ENEMY_PLAYER_POINTS_TABLE,x
        clc
        adc score_0000xx
        sta score_0000xx
        bcc .8bit_no_carry
        inc score_00xx00
.8bit_no_carry
	dex
        lda ENEMY_PLAYER_POINTS_TABLE,x
        clc
        adc score_00xx00
        sta score_00xx00
        bcc .16bit_no_carry
        inc score_xx0000
.16bit_no_carry
	dex
        lda ENEMY_PLAYER_POINTS_TABLE,x
        clc
        adc score_xx0000
        sta score_xx0000
	rts
        

        
        
        
get_enemy_slot_1_sprite: subroutine
	; returns enemy_ram_p
.slot0
	lda $0300
        cmp #$00
        bne .slot1
        lda #$00
        jmp .found_slot
.slot1
	lda $0308
        cmp #$00
        bne .slot2
        lda #$08
        jmp .found_slot
.slot2
	lda $0310
        cmp #$00
        bne .slot3
        lda #$10
        jmp .found_slot
.slot3
	lda $0318
        cmp #$00
        bne .slot4
        lda #$18
        jmp .found_slot
.slot4
	lda $0320
        cmp #$00
        bne .slot5
        lda #$20
        jmp .found_slot
.slot5
	lda $0328
        cmp #$00
        bne .slot6
        lda #$28
        jmp .found_slot
.slot6
	lda $0330
        cmp #$00
        bne .slot7
        lda #$30
        jmp .found_slot
.slot7
	lda $0338
        cmp #$00
        bne .slot8
        lda #$38
        jmp .found_slot
.slot8
	lda $0340
        cmp #$00
        bne .slot9
        lda #$40
        jmp .found_slot
.slot9
	lda $0348
        cmp #$00
        bne .slota
        lda #$48
        jmp .found_slot
.slota
	lda $0350
        cmp #$00
        bne .slotb
        lda #$50
        jmp .found_slot
.slotb
	lda $0358
        cmp #$00
        bne .slotc
        lda #$58
        jmp .found_slot
.slotc
	lda $0360
        cmp #$00
        bne .slotd
        lda #$60
        jmp .found_slot
.slotd
	lda $0368
        cmp #$00
        bne .slote
        lda #$68
        jmp .found_slot
.slote
	lda $0370
        cmp #$00
        bne .slotf
        lda #$70
        jmp .found_slot
.slotf
	lda $0378
        cmp #$00
        bne .slot_wtf_no
        lda #$78
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts
        
        
get_enemy_slot_2_sprite: subroutine
.slot0
	lda $0380
        cmp #$00
        bne .slot1
        lda #$80
        jmp .found_slot
.slot1
	lda $0388
        cmp #$00
        bne .slot2
        lda #$88
        jmp .found_slot
.slot2
	lda $0390
        cmp #$00
        bne .slot3
        lda #$90
        jmp .found_slot
.slot3
	lda $0398
        cmp #$00
        bne .slot_wtf_no
        lda #$98
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts
        
        
get_enemy_slot_4_sprite: subroutine
.slot0
	lda $03a0
        cmp #$00
        bne .slot1
        lda #$a0
        jmp .found_slot
.slot1
	lda $03a8
        cmp #$00
        bne .slot2
        lda #$a8
        jmp .found_slot
.slot2
	lda $03b0
        cmp #$00
        bne .slot3
        lda #$b0
        jmp .found_slot
.slot3
	lda $03b8
        cmp #$00
        bne .slot4
        lda #$b8
        jmp .found_slot
.slot4
	lda $03c0
        cmp #$00
        bne .slot5
        lda #$c0
        jmp .found_slot
.slot5
	lda $03c8
        cmp #$00
        bne .slot6
        lda #$c8
        jmp .found_slot
.slot6
	lda $03d0
        cmp #$00
        bne .slot7
        lda #$d0
        jmp .found_slot
.slot7
	lda $03d8
        cmp #$00
        bne .slot_wtf_no
        lda #$d8
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts
        
        


