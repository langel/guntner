;;;; Constants

ENEMY_RAM	= $0300

;;;;; ENEMY_TYPE_SWITCH
;;;;; #{1} : enemy type
;;;;; #{2} : enemy subroutine

	MAC ENEMY_TYPE_SWITCH
        cmp #{1}
        bne .exit
        jsr {2}
.exit
        ENDM

;;;; enemy types
;	0 = [nothing]
;	1 = starglasses	2x2
;	2 = skully	2x2
;	3 = maggs	2x1
;	4 = birb	1x1
;	5 = bullet0	1x1


enemy_init: subroutine

	lda #$01
        sta $0310 ; enemy type
        sta $0313 ; pattern counter
        sta $0314 ; animation counter
        lda #$00
        sta $0311 ; x pos
        lda rng0
        lsr
        ;da #$60
        sta $0312 ; y pos
        lda #$01
        sta $0315 ; health
        lda #$20
        sta $0317 ; OAM ref
        
	lda #$02
        sta $0320 ; enemy type
        sta $0323 ; pattern counter
        sta $0324 ; animation counter
        lda #$20
        sta $0321 ; x pos
        sta $0322 ; y pos
        lda #$20
        sta $0325 ; health
	rts
        

        
enemy_spawn: subroutine
	jsr get_enemy_slot_1_sprite
        cmp #$ff
        beq .no_spawn
        tax
        jsr birb_spawn
.no_spawn
	rts
        
birb_spawn: subroutine
	; x is set by enemy spawner
	lda #$01
        sta $0300,x ; enemy type
        sta $0303,x ; pattern counter
        sta $0304,x ; animation counter
        lda #$00
        sta $0301,x ; x pos
        lda rng0
        lsr
        sta $0302,x ; y pos
        lda #$01
        sta $0305,x ; health
        clc
        txa
        lsr
        adc #$20
        sta $0307,x ; OAM ref
        
   	rts
        
        
enemy_death: subroutine
        ; clear OAM data
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$00
        sta $0200+0,x
        sta $0200+1,x
        sta $0200+2,x
        sta $0200+3,x
	ldx enemy_handler_pos
        sta ENEMY_RAM,x
        sta ENEMY_RAM+1,x
        sta ENEMY_RAM+2,x
        sta ENEMY_RAM+3,x
        sta ENEMY_RAM+4,x
        sta ENEMY_RAM+5,x
        sta ENEMY_RAM+6,x
        sta ENEMY_RAM+7,x
        jsr enemy_init
        rts
        
        
update_enemies: subroutine

	lda #$00
.handler_loop
        sta enemy_handler_pos
	; get enemy type
        ldx enemy_handler_pos
        lda ENEMY_RAM,x
        ; not defined go next slot
        cmp #$00
        beq .handler_next
        ENEMY_TYPE_SWITCH $01,birb_circle
.handler_next
        ; go to next enemy slot
	lda #$08
        clc
        adc enemy_handler_pos
        bcs .handler_core_end
        jmp .handler_loop
.handler_core_end
	;rts
        
	jsr enemy_spawn

;;; HANDLING STARGLASSES
	; update position
        ; X POS
	inc spin_x
        ldx spin_x
        lda sine_table,x
        lsr
        lsr
        clc
        adc enemy_x
        ; stash it in collision detector
        sta collision_0_x
        ;sta trans_x
        ; top-left sprite
        ;lda trans_x
        sta $283
        sta $28b
        adc #$08
        sta $287
        sta $28f
        ; Y POS
	inc spin_y
	inc spin_y
        ldx spin_y
        lda sine_table,x
        lsr
        lsr
        clc
        adc enemy_y
        ; stash it in collision detector
        sta collision_0_y
        ;sta trans_y
        ;lda trans_y
        sta $280
        sta $284
        adc #$08
        sta $288
        sta $28c
        ; tiles
        ldx enemy_frame
        cpx #$00
        bne .adjust_frame
        ldx #$40
        stx enemy_frame
.adjust_frame
	dex
        stx enemy_frame
        txa
        and #$20
        bne .frame1
.frame0
        lda #$0c
        sta $281
        lda #$0d
        sta $285
        lda #$1c
        sta $289
        lda #$1d
        sta $28d
        jmp .frame_done
.frame1
        lda #$0e
        sta $281
        lda #$0f
        sta $285
        lda #$1e
        sta $289
        lda #$1f
        sta $28d
.frame_done
        ; palette
        lda #$03
        sta $282
        sta $286
        sta $28a
        sta $28e
; shot by bullet?
	lda #$10
        sta collision_0_w
        sta collision_0_h
        jsr player_bullet_collision_handler
        cmp #$00
        beq .nothing
        ; palette
        lda #$00
        sta $282
        sta $286
        sta $28a
        sta $28e
.nothing
    
    
;;;; HANDLING BIRB
	; sprite
	lda #$2c
        lda birb_anim
        lsr
        lsr
        lsr
        clc
        adc #$2c
        
        sta $290 + 1
        ; x pos
        ldx birb_patt
        lda sine_table,x
        lsr 
        lsr
        lsr 
        clc
        adc birb_x
	sta $290 + 3
        ; y pos
        lda birb_patt
        clc
        adc #$40
        tax
        lda sine_table,x
        lsr
        lsr
        lsr
        clc 
        adc birb_y
        sta $290
        ; palette
        lda #$01
        sta $290 + 2
        ; update pattern
        inc birb_patt
        inc birb_patt
        ; update animation
        ldx birb_anim
        cpx #$00
        bne .birb_frame
        ldx #$20
        stx birb_anim
.birb_frame
        dec birb_anim
        
        
;;;; HANDLING SKULLY
	; store palette in y register
        ; so we can apply flip horizontal if needed
        ldy #$03
        ;sprite
        lda skully_anim
        lsr
        lsr
        lsr
        lsr
        lsr
        asl
        tax
        ; accumulator is now in 0..7 range
        cpx #$0a
        beq .skully_sprite_5
        cpx #$0c
        beq .skully_sprite_6
        cpx #$0e
        beq .skully_sprite_7
.skully_normal_frames
        clc
        sta $294 + 1
        adc #$01
        sta $298 + 1
        adc #$0f
        sta $29c + 1
        adc #$01
        sta $2a0 + 1
	sty $21
        jmp .skully_sprites_done
.skully_sprite_5
	lda #$06
        clc
        sta $298 + 1
        adc #$01
        sta $294 + 1
        adc #$0f
        sta $2a0 + 1
        adc #$01
        sta $29c + 1
        ; palette
        tya
        ora #$40
        tay
	sty $21
	jmp .skully_sprites_done
.skully_sprite_6
	lda #$04
        clc
        sta $298 + 1
        adc #$01
        sta $294 + 1
        adc #$0f
        sta $2a0 + 1
        adc #$01
        sta $29c + 1
        ; palette
        tya
        ora #$40
        tay
	sty $21
	jmp .skully_sprites_done
.skully_sprite_7
	lda #$02
        clc
        sta $298 + 1
        adc #$01
        sta $294 + 1
        adc #$0f
        sta $2a0 + 1
        adc #$01
        sta $29c + 1
        ; palette
        tya
        ora #$40
        tay
	sty $21
	jmp .skully_sprites_done
.skully_sprites_done
        ; x pos
        lda skully_x
        sta $294 + 3
        sta $29c + 3
        adc #$08
        sta $298 + 3
        sta $2a0 + 3
        ; y pos
        lda skully_y
        sta $294 + 0
        sta $298 + 0
        adc #$08
        sta $29c + 0
        sta $2a0 + 0
.skully_frame
	lda #$07
        clc
        adc skully_anim
        sta skully_anim
        inc skully_x
        ; stash it in collision detector
        lda skully_x
        sta collision_0_x
        lda skully_y
        sta collision_0_y
        lda #$10
        sta collision_0_w
        sta collision_0_h
; shot by bullet?
        jsr player_bullet_collision_handler
        cmp #$00
        beq .skully_not_hit
        ; palette
        dey
        tya
        sta $294 + 2
        sta $298 + 2
        sta $29c + 2
        sta $2a0 + 2
        jmp .skully_done
.skully_not_hit
        ; palette
        tya 
        sta $294 + 2
        sta $298 + 2
        sta $29c + 2
        sta $2a0 + 2
.skully_done
        

;;;; HANDLING maggs
	; sprite
	lda #$2c
        lda maggs_anim
        lsr
        lsr
        lsr
        lsr
        asl
        clc
        adc #$3c
        sta $2a4 + 1
        adc #$01
        sta $2a8 + 1
        ; x pos
        ldx maggs_patt
        lda sine_table,x
        lsr 
        lsr
        lsr 
        clc
        adc maggs_x
	sta $2a4 + 3
        adc #$08
        sta $2a8 + 3
        ; y pos
        lda maggs_patt
        clc
        adc #$40
        tax
        lda sine_table,x
        lsr
        lsr
        lsr
        clc 
        adc maggs_y
        sta $2a4
        sta $2a8
        ; palette
        lda #$02
        sta $2a4 + 2
        sta $2a8 + 2
        ; update pattern
        inc maggs_patt
        inc maggs_patt
        ; update animation
        ldx maggs_anim
        cpx #$00
        bne .maggs_frame
        ldx #$20
        stx maggs_anim
.maggs_frame
        dec maggs_anim
        inc maggs_x
        
	rts
        
        
        
;;;; HANDLING BIRB
        
birb_circle: subroutine
	ldx enemy_handler_pos
        ; update pattern
        lda ENEMY_RAM+3,x
        inc ENEMY_RAM+3,x
        inc ENEMY_RAM+3,x
        lda ENEMY_RAM+3,x
        
        ; set x position
        ; get x pattern position
        ; add it to base x position
        ; save that to OAM x position
	ldx enemy_handler_pos
        lda ENEMY_RAM+3,x
        tax
        lda sine_table,x
        lsr
        lsr
        lsr
	ldx enemy_handler_pos
        inc ENEMY_RAM+1,x
        clc
        adc ENEMY_RAM+1,x
        tay
        ; temp OAM $02d0
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0203,x
        sta collision_0_x
        
        ; set y position
	ldx enemy_handler_pos
        lda ENEMY_RAM+3,x
        clc 
        adc #$40
        tax
        lda sine_table,x
        lsr
        lsr
        lsr
	ldx enemy_handler_pos
        clc
        adc ENEMY_RAM+2,x
        tay
        ; temp OAM $02d0
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0200,x
        sta collision_0_y
        
        ; current sprite
	ldx enemy_handler_pos
        lda ENEMY_RAM+4,x
        clc
        adc #$14
        sta ENEMY_RAM+4,x
        lsr
        lsr
        lsr
        lsr
        lsr
        lsr
        clc 
        adc #$2c
        tay
        sta $02d1
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0201,x
        
        lda #$08
        sta collision_0_w
        lda #$05
        sta collision_0_h
; shot by bullet?
        jsr player_bullet_collision_handler
        cmp #$00
        beq .birb_not_hit
        ; decrease health
	ldx enemy_handler_pos
        dec ENEMY_RAM+5,x
        lda ENEMY_RAM+5,x
        cmp #$00
        bne .birb_not_dead
        jsr enemy_death
.birb_not_dead
        ; palette
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$00
        sta $0202,x
        jmp .birb_done
.birb_not_hit
        ; palette
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$01
        sta $0202,x
.birb_done
        
        rts
        
        
        
        
get_enemy_slot_1_sprite: subroutine
.slot0
	lda $0300
        cmp #$00
        bne .slot1
        lda #$00
        jmp .found_slot
.slot1
	lda $0308
        cmp #$00
        bne .slot2
        lda #$08
        jmp .found_slot
.slot2
	lda $0310
        cmp #$00
        bne .slot3
        lda #$10
        jmp .found_slot
.slot3
	lda $0318
        cmp #$00
        bne .slot4
        lda #$18
        jmp .found_slot
.slot4
	lda $0320
        cmp #$00
        bne .slot5
        lda #$20
        jmp .found_slot
.slot5
	lda $0328
        cmp #$00
        bne .slot6
        lda #$28
        jmp .found_slot
.slot6
	lda $0330
        cmp #$00
        bne .slot7
        lda #$30
        jmp .found_slot
.slot7
	lda $0338
        cmp #$00
        bne .slot8
        lda #$38
        jmp .found_slot
.slot8
	lda $0340
        cmp #$00
        bne .slot9
        lda #$40
        jmp .found_slot
.slot9
	lda $0348
        cmp #$00
        bne .slota
        lda #$48
        jmp .found_slot
.slota
	lda $0350
        cmp #$00
        bne .slotb
        lda #$50
        jmp .found_slot
.slotb
	lda $0358
        cmp #$00
        bne .slotc
        lda #$58
        jmp .found_slot
.slotc
	lda $0360
        cmp #$00
        bne .slotd
        lda #$60
        jmp .found_slot
.slotd
	lda $0368
        cmp #$00
        bne .slote
        lda #$68
        jmp .found_slot
.slote
	lda $0370
        cmp #$00
        bne .slotf
        lda #$70
        jmp .found_slot
.slotf
	lda $0378
        cmp #$00
        bne .slot_wtf_no
        lda #$78
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts