;;;; Constants

ENEMY_RAM	= $0300
ENEMY_METHODS_LOOKUP_TABLE	= $f000



;;;; enemy types
;	0 = [nothing]
;	1 = starglasses	2x2
;	2 = skully	2x2
;	3 = maggs	2x1
;	4 = birb	1x1
;	5 = bullet0	1x1


	;include "enemy_birb.dasm"

        
enemy_spawn: subroutine
	jsr get_enemy_slot_1_sprite
        cmp #$ff
        beq .no_birb_spawn
        tax
        jsr birb_spawn
.no_birb_spawn
	jsr get_enemy_slot_2_sprite
        cmp #$ff
        beq .no_maggs_spawn
        tax
        jsr maggs_spawn
.no_maggs_spawn
	rts
        
birb_spawn: subroutine
	; x is set by enemy spawner
	lda #$02
        sta $0300,x ; enemy type
        sta $0303,x ; pattern counter
        sta $0304,x ; animation counter
        lda #$00
        sta $0301,x ; x pos
        lda rng0
        lsr
        sta $0302,x ; y pos
        lda #$01
        sta $0305,x ; health
        clc
        txa
        lsr
        adc #$20
        sta $0307,x ; OAM ref
        
   	rts
        
maggs_spawn: subroutine
	; x is set by enemy spawner
	lda #$03
        sta $0300,x ; enemy type
        sta $0303,x ; pattern counter
        sta $0304,x ; animation counter
        lda #$00
        sta $0301,x ; x pos
        lda rng0
        lsr
        clc
        adc #$08
        sta $0302,x ; y pos
        lda #$04
        sta $0305,x ; health
        txa
        sec
        sbc #$80
        ;sl
        ;asl
        clc
        adc #$60
        sta $0307,x ; OAM ref
        
   	rts
        
        
enemy_death: subroutine
        ; clear OAM data
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$00
        sta $0200+0,x
        sta $0200+1,x
        sta $0200+2,x
        sta $0200+3,x
	ldx enemy_handler_pos
        sta ENEMY_RAM,x
        sta ENEMY_RAM+1,x
        sta ENEMY_RAM+2,x
        sta ENEMY_RAM+3,x
        sta ENEMY_RAM+4,x
        sta ENEMY_RAM+5,x
        sta ENEMY_RAM+6,x
        sta ENEMY_RAM+7,x
        rts
        
        
update_enemies: subroutine

	lda #$00
        sta enemy_handler_pos
.handler_loop
	; get enemy type
        ldx enemy_handler_pos
        lda ENEMY_RAM,x
        ; not defined go next slot
        cmp #$00
        beq .handler_next
        asl
        tax
        lda ENEMY_METHODS_LOOKUP_TABLE,x
        sta enemy_temp_addr_lo
        inx
        lda ENEMY_METHODS_LOOKUP_TABLE,x
        sta enemy_temp_addr_hi
        jmp (enemy_temp_addr_lo)
        ;ENEMY_TYPE_SWITCH $01,birb_cycle
update_enemies_handler_next:
.handler_next
        ; go to next enemy slot
	lda #$08
        clc
        adc enemy_handler_pos
        bcs .handler_core_end
        sta enemy_handler_pos
        jmp .handler_loop
.handler_core_end
        
	jsr enemy_spawn
	rts

;;; HANDLING STARGLASSES
	; update position
        ; X POS
	inc spin_x
        ldx spin_x
        lda sine_table,x
        lsr
        lsr
        clc
        adc enemy_x
        ; stash it in collision detector
        sta collision_0_x
        ;sta trans_x
        ; top-left sprite
        ;lda trans_x
        sta $283
        sta $28b
        adc #$08
        sta $287
        sta $28f
        ; Y POS
	inc spin_y
	inc spin_y
        ldx spin_y
        lda sine_table,x
        lsr
        lsr
        clc
        adc enemy_y
        ; stash it in collision detector
        sta collision_0_y
        ;sta trans_y
        ;lda trans_y
        sta $280
        sta $284
        adc #$08
        sta $288
        sta $28c
        ; tiles
        ldx enemy_frame
        cpx #$00
        bne .adjust_frame
        ldx #$40
        stx enemy_frame
.adjust_frame
	dex
        stx enemy_frame
        txa
        and #$20
        bne .frame1
.frame0
        lda #$0c
        sta $281
        lda #$0d
        sta $285
        lda #$1c
        sta $289
        lda #$1d
        sta $28d
        jmp .frame_done
.frame1
        lda #$0e
        sta $281
        lda #$0f
        sta $285
        lda #$1e
        sta $289
        lda #$1f
        sta $28d
.frame_done
        ; palette
        lda #$03
        sta $282
        sta $286
        sta $28a
        sta $28e
; shot by bullet?
	lda #$10
        sta collision_0_w
        sta collision_0_h
        jsr player_bullet_collision_handler
        cmp #$00
        beq .nothing
        ; palette
        lda #$00
        sta $282
        sta $286
        sta $28a
        sta $28e
.nothing
    
        
        
;;;; HANDLING SKULLY
	; store palette in y register
        ; so we can apply flip horizontal if needed
        ldy #$03
        ;sprite
        lda skully_anim
        lsr
        lsr
        lsr
        lsr
        lsr
        asl
        tax
        ; accumulator is now in 0..7 range
        cpx #$0a
        beq .skully_sprite_5
        cpx #$0c
        beq .skully_sprite_6
        cpx #$0e
        beq .skully_sprite_7
.skully_normal_frames
        clc
        sta $294 + 1
        adc #$01
        sta $298 + 1
        adc #$0f
        sta $29c + 1
        adc #$01
        sta $2a0 + 1
	sty $21
        jmp .skully_sprites_done
.skully_sprite_5
	lda #$06
        clc
        sta $298 + 1
        adc #$01
        sta $294 + 1
        adc #$0f
        sta $2a0 + 1
        adc #$01
        sta $29c + 1
        ; palette
        tya
        ora #$40
        tay
	sty $21
	jmp .skully_sprites_done
.skully_sprite_6
	lda #$04
        clc
        sta $298 + 1
        adc #$01
        sta $294 + 1
        adc #$0f
        sta $2a0 + 1
        adc #$01
        sta $29c + 1
        ; palette
        tya
        ora #$40
        tay
	sty $21
	jmp .skully_sprites_done
.skully_sprite_7
	lda #$02
        clc
        sta $298 + 1
        adc #$01
        sta $294 + 1
        adc #$0f
        sta $2a0 + 1
        adc #$01
        sta $29c + 1
        ; palette
        tya
        ora #$40
        tay
	sty $21
	jmp .skully_sprites_done
.skully_sprites_done
        ; x pos
        lda skully_x
        sta $294 + 3
        sta $29c + 3
        adc #$08
        sta $298 + 3
        sta $2a0 + 3
        ; y pos
        lda skully_y
        sta $294 + 0
        sta $298 + 0
        adc #$08
        sta $29c + 0
        sta $2a0 + 0
.skully_frame
	lda #$07
        clc
        adc skully_anim
        sta skully_anim
        inc skully_x
        ; stash it in collision detector
        lda skully_x
        sta collision_0_x
        lda skully_y
        sta collision_0_y
        lda #$10
        sta collision_0_w
        sta collision_0_h
; shot by bullet?
        jsr player_bullet_collision_handler
        cmp #$00
        beq .skully_not_hit
        ; palette
        dey
        tya
        sta $294 + 2
        sta $298 + 2
        sta $29c + 2
        sta $2a0 + 2
        jmp .skully_done
.skully_not_hit
        ; palette
        tya 
        sta $294 + 2
        sta $298 + 2
        sta $29c + 2
        sta $2a0 + 2
.skully_done
	rts
        
        
crossbones_cycle: subroutine
	ldx enemy_handler_pos
        lda ENEMY_RAM+2,x
        sec
        sbc ENEMY_RAM+5,x
        inc ENEMY_RAM+5,x
        bcc .crossbones_death
        sta ENEMY_RAM+2,x
        tay
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0200,x
        lda #$0b
        sta $0201,x
        jmp .crossbones_done
.crossbones_death
        jsr enemy_death
.crossbones_done
	jmp update_enemies_handler_next
        

;;;; HANDLING maggs
maggs_cycle: subroutine
	ldx enemy_handler_pos
	; sprite
        lda ENEMY_RAM+4,x
        lsr
        lsr
        lsr
        lsr
        asl
        clc
        adc #$3c
        tay
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0201+0,x
        iny
        tya
        sta $0201+4,x
        
        ; x pos
	ldx enemy_handler_pos
        lda ENEMY_RAM+1,x
        sta collision_0_x
        tay
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0203+0,x
        clc
        adc #$08
        sta $0203+4,x
        
        ; y pos
	ldx enemy_handler_pos
        ;lda ENEMY_RAM+3,x
        ;clc
        ;adc #$40
        ;tax
        ;lda sine_table,x
        ;lsr
        ;lsr
        ;lsr
        ;lsr
        ;lsr
        ;clc
        ;adc ENEMY_RAM+2,x
        lda ENEMY_RAM+2,x
        sta collision_0_y
        tay
        ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0200+0,x
        sta $0200+4,x
        
        ; palette
        lda #$02
        sta $0202+0,x
        sta $0202+4,x
        
        ; update pattern
	ldx enemy_handler_pos
        inc ENEMY_RAM+3,x
        inc ENEMY_RAM+3,x
        ; move forward
        inc ENEMY_RAM+1,x
        ; update animation
        lda ENEMY_RAM+4,x
        cmp #$00
        bne .maggs_frame
        lda #$20
        sta ENEMY_RAM+4,x
.maggs_frame
        dec ENEMY_RAM+4,x
        
        lda #$10
        sta collision_0_w
        lda #$05
        sta collision_0_h
; shot by bullet?
        jsr player_bullet_collision_handler
        cmp #$00
        beq .not_hit
        ; decrease health
	ldx enemy_handler_pos
        dec ENEMY_RAM+5,x
        lda ENEMY_RAM+5,x
        cmp #$00
        bne .not_dead
        ; DEAD
        ; change it into crossbones!
        lda #$01
        sta ENEMY_RAM+0,x
        lda ENEMY_RAM+7,x
        tax
        lda #$ff
        sta $0203+4,x
        lda $0203+0,x
        clc
        adc #$07
        sta $0203+0,x
        ;jsr enemy_death
.not_dead
        ; palette
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$00
        sta $0202,x
        sta $0206,x
        jmp .done
.not_hit
        ; palette
	;ldx enemy_handler_pos
        ;lda ENEMY_RAM+7,x
        ;tax
        ;lda #$01
        ;sta $0202,x
.done
	jmp update_enemies_handler_next
        
        
        
;;;; HANDLING BIRB
        
birb_cycle: subroutine
	ldx enemy_handler_pos
        ; update pattern
        lda ENEMY_RAM+3,x
        inc ENEMY_RAM+3,x
        inc ENEMY_RAM+3,x
        lda ENEMY_RAM+3,x
        
        ; set x position
        ; get x pattern position
        ; add it to base x position
        ; save that to OAM x position
	ldx enemy_handler_pos
        lda ENEMY_RAM+3,x
        tax
        lda sine_table,x
        lsr
        lsr
        lsr
	ldx enemy_handler_pos
        inc ENEMY_RAM+1,x
        clc
        adc ENEMY_RAM+1,x
        tay
        ; temp OAM $02d0
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0203,x
        sta collision_0_x
        
        ; set y position
	ldx enemy_handler_pos
        lda ENEMY_RAM+3,x
        clc 
        adc #$40
        tax
        lda sine_table,x
        lsr
        lsr
        lsr
	ldx enemy_handler_pos
        clc
        adc ENEMY_RAM+2,x
        tay
        ; temp OAM $02d0
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0200,x
        sta collision_0_y
        
        ; current sprite
	ldx enemy_handler_pos
        lda ENEMY_RAM+4,x
        clc
        adc #$14
        sta ENEMY_RAM+4,x
        lsr
        lsr
        lsr
        lsr
        lsr
        lsr
        clc 
        adc #$2c
        tay
        sta $02d1
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        tya
        sta $0201,x
        
        lda #$08
        sta collision_0_w
        lda #$05
        sta collision_0_h
; shot by bullet?
        jsr player_bullet_collision_handler
        cmp #$00
        beq .birb_not_hit
        ; decrease health
	ldx enemy_handler_pos
        dec ENEMY_RAM+5,x
        lda ENEMY_RAM+5,x
        cmp #$00
        bne .birb_not_dead
        ; change it into crossbones!
        lda #$01
        sta ENEMY_RAM+0,x
.birb_not_dead
        ; palette
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$00
        sta $0202,x
        jmp .birb_done
.birb_not_hit
        ; palette
	ldx enemy_handler_pos
        lda ENEMY_RAM+7,x
        tax
        lda #$01
        sta $0202,x
.birb_done
        
	jmp update_enemies_handler_next
        
        

;;; HANDLING STARGLASSES
starglasses_cycle:

	ldx enemy_handler_pos
	; using pattern_counter for x sin
	inc ENEMY_RAM+3,x
	; using anim_counter for y sin
	inc ENEMY_RAM+4,x
	inc ENEMY_RAM+4,x

	; calc x
	lda ENEMY_RAM+3,x
	lax
	lda sine_table,x
	lsr
	lsr
	ldx enemy_handler_pos
	clc
	adc ENEMY_RAM+1,x
	sta collision_0_x
	tay
	lda ENEMY_RAM+7,x
	tax
	tya
	sta $0203,x
	sta $020b,x
	clc
	adc #$08
	sta $0207,x
	sta $020f,x

	; calc y
	ldx enemy_handler_pos
	lda sine_table,x
	lsr
	lsr
	clc
	ldx enemy_handler_pos
	adc ENEMY_RAM+2,x
	sta collision_0_y
	tay
	lda ENEMY_RAM+7,x
	tax
	tya
	sta $0200,x
	sta $0204,x
	clc
	adc #$08
	sta $0208,x
	sta $020c,x

	; tiles
	ldx enemy_handler_pos
	lda ENEMY_RAM+4,x
	bit #$20
	beq .frame1
.frame0
	lda ENEMY_RAM+7,x
	tax
	lda #$0c
	sta $0201,x
	lda #$0d
	sta $0205,x
	lda #$1c
	sta $0209,x
	lda #$1d
	sta $020d,x
	jmp .frame_done
.frame1
	lda ENEMY_RAM+7,x
	tax
	lda #$0e
	sta $0201,x
	lda #$0f
	sta $0205,x
	lda #$1e
	sta $0209,x
	lda #$1f
	sta $020d,x
.frame_done
	; palette
	lda #$03
	sta $0202,x
	sta $0206,x
	sta $020a,x
	sta $020e,x
; shot by bullet?
	lda #$10
	sta collision_0_w
	sta collision_0_h
	jsr player_bullet_collision_handler
	cmp #$00
	beq .nothing
	; palette
	ldx enemy_handler_pos
	lda ENEMY_RAM+7,x
	tax
	lda #$00
	sta $0202,x
	sta $0206,x
	sta $020a,x
	sta $020e,x
.nothing
	jmp update_enemies_handler_next
        
        
        
get_enemy_slot_1_sprite: subroutine
.slot0
	lda $0300
        cmp #$00
        bne .slot1
        lda #$00
        jmp .found_slot
.slot1
	lda $0308
        cmp #$00
        bne .slot2
        lda #$08
        jmp .found_slot
.slot2
	lda $0310
        cmp #$00
        bne .slot3
        lda #$10
        jmp .found_slot
.slot3
	lda $0318
        cmp #$00
        bne .slot4
        lda #$18
        jmp .found_slot
.slot4
	lda $0320
        cmp #$00
        bne .slot5
        lda #$20
        jmp .found_slot
.slot5
	lda $0328
        cmp #$00
        bne .slot6
        lda #$28
        jmp .found_slot
.slot6
	lda $0330
        cmp #$00
        bne .slot7
        lda #$30
        jmp .found_slot
.slot7
	lda $0338
        cmp #$00
        bne .slot8
        lda #$38
        jmp .found_slot
.slot8
	lda $0340
        cmp #$00
        bne .slot9
        lda #$40
        jmp .found_slot
.slot9
	lda $0348
        cmp #$00
        bne .slota
        lda #$48
        jmp .found_slot
.slota
	lda $0350
        cmp #$00
        bne .slotb
        lda #$50
        jmp .found_slot
.slotb
	lda $0358
        cmp #$00
        bne .slotc
        lda #$58
        jmp .found_slot
.slotc
	lda $0360
        cmp #$00
        bne .slotd
        lda #$60
        jmp .found_slot
.slotd
	lda $0368
        cmp #$00
        bne .slote
        lda #$68
        jmp .found_slot
.slote
	lda $0370
        cmp #$00
        bne .slotf
        lda #$70
        jmp .found_slot
.slotf
	lda $0378
        cmp #$00
        bne .slot_wtf_no
        lda #$78
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts
        
        
get_enemy_slot_2_sprite: subroutine
.slot0
	lda $0380
        cmp #$00
        bne .slot1
        lda #$80
        jmp .found_slot
.slot1
	lda $0388
        cmp #$00
        bne .slot2
        lda #$88
        jmp .found_slot
.slot2
	lda $0390
        cmp #$00
        bne .slot3
        lda #$90
        jmp .found_slot
.slot3
	lda $0398
        cmp #$00
        bne .slot_wtf_no
        lda #$98
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts
        
get_enemy_slot_4_sprite: subroutine
.slot0
	lda $03a0
        cmp #$00
        bne .slot1
        lda #$a0
        jmp .found_slot
.slot1
	lda $03a8
        cmp #$00
        bne .slot2
        lda #$a8
        jmp .found_slot
.slot2
	lda $03b0
        cmp #$00
        bne .slot3
        lda #$90
        jmp .found_slot
.slot3
	lda $03b8
        cmp #$00
        bne .slot4
        lda #$98
        jmp .found_slot
.slot4
	lda $03c0
        cmp #$00
        bne .slot5
        lda #$a0
        jmp .found_slot
.slot5
	lda $03c8
        cmp #$00
        bne .slot6
        lda #$a8
        jmp .found_slot
.slot6
	lda $03c0
        cmp #$00
        bne .slot7
        lda #$90
        jmp .found_slot
.slot7
	lda $03c8
        cmp #$00
        bne .slot_wtf_no
        lda #$98
        jmp .found_slot
.slot_wtf_no
;return #$ff for FALSE
	lda #$ff
.found_slot
	rts
        
        

        
        org $f000
ENEMY_METHODS_LOOKUP_TABLE:
        hex 0000
        word crossbones_cycle
        word birb_cycle
        word maggs_cycle
        word starglasses_cycle
        
